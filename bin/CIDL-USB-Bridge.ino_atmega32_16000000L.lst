
C:\Users\mss\AppData\Local\Temp\arduino-sketch-B6E24DCBECD509F9BC23E20B5D32069C/CIDL-USB-Bridge.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_1>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_11>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_16>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <Goertzel::getCoefficient()+0x24>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__trampolines_end>:
__trampolines_start():
      72:	44 54       	subi	r20, 0x44	; 68
      74:	4d 46       	sbci	r20, 0x6D	; 109
      76:	20 44       	sbci	r18, 0x40	; 64
      78:	65 63       	ori	r22, 0x35	; 53
      7a:	6f 64       	ori	r22, 0x4F	; 79
      7c:	65 72       	andi	r22, 0x25	; 37
      7e:	20 56       	subi	r18, 0x60	; 96
      80:	30 5f       	subi	r19, 0xF0	; 240
      82:	30 38       	cpi	r19, 0x80	; 128
      84:	50 00       	.word	0x0050	; ????

00000086 <usbDescriptorHidReport>:
      86:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 08     .........&..u...
      96:	09 00 82 02 01 95 20 09 00 b2 02 01 c0              ...... ......

000000a3 <usbDescriptorConfiguration>:
      a3:	09 02 22 00 01 01 00 80 7d 09 04 00 00 01 03 00     ..".....}.......
      b3:	00 00 09 21 01 01 00 01 22 1d 00 07 05 81 03 08     ...!....".......
      c3:	00 64                                               .d

000000c5 <usbDescriptorDevice>:
      c5:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
      d5:	00 01                                               ..

000000d7 <usbDescriptorStringDevice>:
      d7:	14 03 44 00 61 00 74 00 61 00 53 00 74 00 6f 00     ..D.a.t.a.S.t.o.
      e7:	72 00 65 00                                         r.e.

000000eb <usbDescriptorStringVendor>:
      eb:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
      fb:	74 00                                               t.

000000fd <usbDescriptorString0>:
      fd:	04 03 09 04                                         ....

00000101 <digital_pin_to_timer_PGM>:
     101:	00 00 00 02 00 00 00 00 00 00 00 00 05 04 00 07     ................
	...

00000121 <digital_pin_to_bit_mask_PGM>:
     121:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     131:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000141 <digital_pin_to_port_PGM>:
     141:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     151:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000161 <port_to_input_PGM>:
     161:	00 00 39 00 36 00 33 00 30 00                       ..9.6.3.0.

0000016b <port_to_output_PGM>:
     16b:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

00000175 <port_to_mode_PGM>:
     175:	00 00 3a 00 37 00 34 00 31 00 00                    ..:.7.4.1..

00000180 <__ctors_start>:
__ctors_start():
     180:	57 03       	mulsu	r21, r23

00000182 <__ctors_end>:
__dtors_end():
     182:	11 24       	eor	r1, r1
     184:	1f be       	out	0x3f, r1	; 63
     186:	cf e5       	ldi	r28, 0x5F	; 95
     188:	d8 e0       	ldi	r29, 0x08	; 8
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     18e:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     190:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     192:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     194:	ec ef       	ldi	r30, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     196:	f0 e2       	ldi	r31, 0x20	; 32
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     198:	02 c0       	rjmp	.+4      	; 0x19e <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     19a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     19c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     19e:	aa 3a       	cpi	r26, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1a0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1a2:	d9 f7       	brne	.-10     	; 0x19a <__do_copy_data+0xc>

000001a4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1a4:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1a6:	aa ea       	ldi	r26, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1ae:	a7 30       	cpi	r26, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1b0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>

000001b4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1b4:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1b6:	c1 ec       	ldi	r28, 0xC1	; 193
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1bc:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1be:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1c0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1c4:	c0 3c       	cpi	r28, 0xC0	; 192
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1c6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1c8:	c9 f7       	brne	.-14     	; 0x1bc <__do_global_ctors+0x8>
     1ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <main>
     1ce:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <_exit>

000001d2 <__bad_interrupt>:
__vector_12():
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <usbCrc16>:
usbCrc16():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:233
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     1d6:	a8 2f       	mov	r26, r24
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:234
    mov     ptrH, argPtrH
     1d8:	b9 2f       	mov	r27, r25
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:235
    ldi     resCrcL, 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:236
    ldi     resCrcH, 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:237
    ldi     polyL, lo8(0xa001)
     1de:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:238
    ldi     polyH, hi8(0xa001)
     1e0:	50 ea       	ldi	r21, 0xA0	; 160
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:239
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     1e2:	60 95       	com	r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:240
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     1e4:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:241
    rjmp    usbCrcLoopEntry
     1e6:	09 c0       	rjmp	.+18     	; 0x1fa <usbCrcLoopEntry>

000001e8 <usbCrcByteLoop>:
usbCrcByteLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:243
usbCrcByteLoop:
    ld      byte, ptr+
     1e8:	2d 91       	ld	r18, X+
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:244
    eor     resCrcL, byte
     1ea:	82 27       	eor	r24, r18

000001ec <usbCrcBitLoop>:
usbCrcBitLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:246
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     1ec:	97 95       	ror	r25
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:247
    ror     resCrcL
     1ee:	87 95       	ror	r24
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:248
    brcs    usbCrcNoXor
     1f0:	10 f0       	brcs	.+4      	; 0x1f6 <usbCrcNoXor>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:249
    eor     resCrcL, polyL
     1f2:	84 27       	eor	r24, r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:250
    eor     resCrcH, polyH
     1f4:	95 27       	eor	r25, r21

000001f6 <usbCrcNoXor>:
usbCrcNoXor():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:252
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     1f6:	30 5e       	subi	r19, 0xE0	; 224
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:253
    brcs    usbCrcBitLoop
     1f8:	c8 f3       	brcs	.-14     	; 0x1ec <usbCrcBitLoop>

000001fa <usbCrcLoopEntry>:
usbCrcLoopEntry():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:255
usbCrcLoopEntry:
    subi    argLen, -1
     1fa:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:256
    brcs    usbCrcByteLoop
     1fc:	a8 f3       	brcs	.-22     	; 0x1e8 <usbCrcByteLoop>

000001fe <usbCrcReady>:
usbCrcReady():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:258
usbCrcReady:
    ret
     1fe:	08 95       	ret

00000200 <usbCrc16Append>:
usbCrc16Append():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:265

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     200:	ea df       	rcall	.-44     	; 0x1d6 <usbCrc16>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:266
    st      ptr+, resCrcL
     202:	8d 93       	st	X+, r24
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:267
    st      ptr+, resCrcH
     204:	9d 93       	st	X+, r25
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm.S:268
    ret
     206:	08 95       	ret

00000208 <__vector_1>:
__vector_1():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:34
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
     208:	cf 93       	push	r28
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:35
    in      YL, SREG            ;[-23]
     20a:	cf b7       	in	r28, 0x3f	; 63
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:36
    push    YL                  ;[-22]
     20c:	cf 93       	push	r28
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:37
    push    YH                  ;[-20]
     20e:	df 93       	push	r29

00000210 <waitForJ>:
waitForJ():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:47
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     210:	c3 95       	inc	r28
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:48
    sbis    USBIN, USBMINUS
     212:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:49
    brne    waitForJ        ; just make sure we have ANY timeout
     214:	e9 f7       	brne	.-6      	; 0x210 <waitForJ>

00000216 <waitForK>:
waitForK():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:52
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     216:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:53
    rjmp    foundK              ;[-14]
     218:	0b c0       	rjmp	.+22     	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:54
    sbis    USBIN, USBMINUS
     21a:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:55
    rjmp    foundK
     21c:	09 c0       	rjmp	.+18     	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:56
    sbis    USBIN, USBMINUS
     21e:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:57
    rjmp    foundK
     220:	07 c0       	rjmp	.+14     	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:58
    sbis    USBIN, USBMINUS
     222:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:59
    rjmp    foundK
     224:	05 c0       	rjmp	.+10     	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:60
    sbis    USBIN, USBMINUS
     226:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:61
    rjmp    foundK
     228:	03 c0       	rjmp	.+6      	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:62
    sbis    USBIN, USBMINUS
     22a:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:63
    rjmp    foundK
     22c:	01 c0       	rjmp	.+2      	; 0x230 <foundK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:72
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     22e:	8b c0       	rjmp	.+278    	; 0x346 <sofError>

00000230 <foundK>:
foundK():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:77
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
     230:	6f 93       	push	r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:79
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
     232:	c0 91 e6 01 	lds	r28, 0x01E6	; 0x8001e6 <usbInputBufOffset>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:81
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
     236:	dd 27       	eor	r29, r29
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:82
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
     238:	c3 51       	subi	r28, 0x13	; 19
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:83
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
     23a:	de 4f       	sbci	r29, 0xFE	; 254
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:84
    push    shift               ;[-5]
     23c:	2f 93       	push	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:86
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
     23e:	65 e5       	ldi	r22, 0x55	; 85
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:87
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     240:	84 9b       	sbis	0x10, 4	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:88
    rjmp    haveTwoBitsK        ;[-1]
     242:	03 c0       	rjmp	.+6      	; 0x24a <haveTwoBitsK>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:89
    pop     shift               ;[0] undo the push from before
     244:	2f 91       	pop	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:90
    pop     bitcnt              ;[2] undo the push from before
     246:	6f 91       	pop	r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:91
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     248:	e6 cf       	rjmp	.-52     	; 0x216 <waitForK>

0000024a <haveTwoBitsK>:
haveTwoBitsK():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:99

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
     24a:	0f 93       	push	r16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:100
    push    x2              ;[3]
     24c:	1f 93       	push	r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:101
    push    x3              ;[5]
     24e:	4f 93       	push	r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:102
    ldi     shift, 0        ;[7]
     250:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:103
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
     252:	40 e1       	ldi	r20, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:104
    push    x4              ;[9] == leap
     254:	5f 93       	push	r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:106

    in      x1, USBIN       ;[11] <-- sample bit 0
     256:	00 b3       	in	r16, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:107
    andi    x1, USBMASK     ;[12]
     258:	04 71       	andi	r16, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:108
    bst     x1, USBMINUS    ;[13]
     25a:	04 fb       	bst	r16, 4
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:109
    bld     shift, 7        ;[14]
     25c:	27 f9       	bld	r18, 7
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:110
    push    cnt             ;[15]
     25e:	3f 93       	push	r19
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:111
    ldi     leap, 0         ;[17] [rx loop init]
     260:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:112
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
     262:	3b e0       	ldi	r19, 0x0B	; 11
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:113
    rjmp    rxbit1          ;[19] arrives at [21]
     264:	39 c0       	rjmp	.+114    	; 0x2d8 <rxbit1>

00000266 <unstuff6>:
unstuff6():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:123

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
     266:	14 71       	andi	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:124
    ori     x3, 1<<6    ;[04] will not be shifted any more
     268:	40 64       	ori	r20, 0x40	; 64
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:125
    andi    shift, ~0x80;[05]
     26a:	2f 77       	andi	r18, 0x7F	; 127
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:126
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
     26c:	01 2f       	mov	r16, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:127
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
     26e:	5f 5f       	subi	r21, 0xFF	; 255
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:128
    rjmp    didUnstuff6 ;[08]
     270:	1e c0       	rjmp	.+60     	; 0x2ae <didUnstuff6>

00000272 <unstuff7>:
unstuff7():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:131

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
     272:	40 68       	ori	r20, 0x80	; 128
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:132
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
     274:	10 b3       	in	r17, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:133
    andi    x2, USBMASK ;[01]
     276:	14 71       	andi	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:134
    andi    shift, ~0x80;[02]
     278:	2f 77       	andi	r18, 0x7F	; 127
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:135
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
     27a:	52 50       	subi	r21, 0x02	; 2
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:136
    rjmp    didUnstuff7 ;[04]
     27c:	1f c0       	rjmp	.+62     	; 0x2bc <didUnstuff7>

0000027e <unstuffEven>:
unstuffEven():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:139

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
     27e:	40 64       	ori	r20, 0x40	; 64
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:140
    in      x1, USBIN   ;[00] [10]
     280:	00 b3       	in	r16, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:141
    andi    shift, ~0x80;[01]
     282:	2f 77       	andi	r18, 0x7F	; 127
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:142
    andi    x1, USBMASK ;[02]
     284:	04 71       	andi	r16, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:143
    breq    se0         ;[03]
     286:	d1 f1       	breq	.+116    	; 0x2fc <se0>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:144
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
     288:	5f 5f       	subi	r21, 0xFF	; 255
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:145
    nop2                ;[05]
     28a:	00 c0       	rjmp	.+0      	; 0x28c <unstuffEven+0xe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:146
    rjmp    didUnstuffE ;[06]
     28c:	23 c0       	rjmp	.+70     	; 0x2d4 <didUnstuffE>

0000028e <unstuffOdd>:
unstuffOdd():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:149

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
     28e:	40 62       	ori	r20, 0x20	; 32
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:150
    in      x2, USBIN   ;[00] [10]
     290:	10 b3       	in	r17, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:151
    andi    shift, ~0x80;[01]
     292:	2f 77       	andi	r18, 0x7F	; 127
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:152
    andi    x2, USBMASK ;[02]
     294:	14 71       	andi	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:153
    breq    se0         ;[03]
     296:	91 f1       	breq	.+100    	; 0x2fc <se0>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:154
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
     298:	5f 5f       	subi	r21, 0xFF	; 255
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:155
    nop2                ;[05]
     29a:	00 c0       	rjmp	.+0      	; 0x29c <unstuffOdd+0xe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:156
    rjmp    didUnstuffO ;[06]
     29c:	25 c0       	rjmp	.+74     	; 0x2e8 <didUnstuffO>

0000029e <rxByteLoop>:
rxByteLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:159

rxByteLoop:
    andi    x1, USBMASK ;[03]
     29e:	04 71       	andi	r16, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:160
    eor     x2, x1      ;[04]
     2a0:	10 27       	eor	r17, r16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:161
    subi    leap, 1     ;[05]
     2a2:	51 50       	subi	r21, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:162
    brpl    skipLeap    ;[06]
     2a4:	12 f4       	brpl	.+4      	; 0x2aa <skipLeap>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:163
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
     2a6:	5d 5f       	subi	r21, 0xFD	; 253
	...

000002aa <skipLeap>:
skipLeap():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:166
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
     2aa:	11 50       	subi	r17, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:167
    ror     shift       ;[09]
     2ac:	27 95       	ror	r18

000002ae <didUnstuff6>:
didUnstuff6():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:169
didUnstuff6:
    cpi     shift, 0xfc ;[10]
     2ae:	2c 3f       	cpi	r18, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:170
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
     2b0:	10 b3       	in	r17, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:171
    brcc    unstuff6    ;[01]
     2b2:	c8 f6       	brcc	.-78     	; 0x266 <unstuff6>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:172
    andi    x2, USBMASK ;[02]
     2b4:	14 71       	andi	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:173
    eor     x1, x2      ;[03]
     2b6:	01 27       	eor	r16, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:174
    subi    x1, 1       ;[04]
     2b8:	01 50       	subi	r16, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:175
    ror     shift       ;[05]
     2ba:	27 95       	ror	r18

000002bc <didUnstuff7>:
didUnstuff7():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:177
didUnstuff7:
    cpi     shift, 0xfc ;[06]
     2bc:	2c 3f       	cpi	r18, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:178
    brcc    unstuff7    ;[07]
     2be:	c8 f6       	brcc	.-78     	; 0x272 <unstuff7>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:179
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
     2c0:	42 27       	eor	r20, r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:180
    st      y+, x3      ;[09] store data
     2c2:	49 93       	st	Y+, r20

000002c4 <rxBitLoop>:
rxBitLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:182
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
     2c4:	00 b3       	in	r16, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:183
    andi    x1, USBMASK ;[01]
     2c6:	04 71       	andi	r16, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:184
    eor     x2, x1      ;[02]
     2c8:	10 27       	eor	r17, r16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:185
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
     2ca:	4f 73       	andi	r20, 0x3F	; 63
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:186
    subi    x2, 1       ;[04]
     2cc:	11 50       	subi	r17, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:187
    ror     shift       ;[05]
     2ce:	27 95       	ror	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:188
    cpi     shift, 0xfc ;[06]
     2d0:	2c 3f       	cpi	r18, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:189
    brcc    unstuffEven ;[07]
     2d2:	a8 f6       	brcc	.-86     	; 0x27e <unstuffEven>

000002d4 <didUnstuffE>:
didUnstuffE():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:191
didUnstuffE:
    lsr     x3          ;[08]
     2d4:	46 95       	lsr	r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:192
    lsr     x3          ;[09]
     2d6:	46 95       	lsr	r20

000002d8 <rxbit1>:
rxbit1():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:194
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
     2d8:	10 b3       	in	r17, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:195
    andi    x2, USBMASK ;[01]
     2da:	14 71       	andi	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:196
    breq    se0         ;[02]
     2dc:	79 f0       	breq	.+30     	; 0x2fc <se0>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:197
    eor     x1, x2      ;[03]
     2de:	01 27       	eor	r16, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:198
    subi    x1, 1       ;[04]
     2e0:	01 50       	subi	r16, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:199
    ror     shift       ;[05]
     2e2:	27 95       	ror	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:200
    cpi     shift, 0xfc ;[06]
     2e4:	2c 3f       	cpi	r18, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:201
    brcc    unstuffOdd  ;[07]
     2e6:	98 f6       	brcc	.-90     	; 0x28e <unstuffOdd>

000002e8 <didUnstuffO>:
didUnstuffO():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:203
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
     2e8:	6b 5a       	subi	r22, 0xAB	; 171
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:204
    brcs    rxBitLoop   ;[09]
     2ea:	60 f3       	brcs	.-40     	; 0x2c4 <rxBitLoop>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:206

    subi    cnt, 1      ;[10]
     2ec:	31 50       	subi	r19, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:207
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
     2ee:	00 b3       	in	r16, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:208
    brcc    rxByteLoop  ;[01]
     2f0:	b0 f6       	brcc	.-84     	; 0x29e <rxByteLoop>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:209
    rjmp    overflow
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <overflow>

000002f4 <overflow>:
overflow():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:43
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     2f4:	10 e4       	ldi	r17, 0x40	; 64
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:44
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     2f6:	1a bf       	out	0x3a, r17	; 58

000002f8 <ignorePacket>:
ignorePacket():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:46
ignorePacket:
    clr     token
     2f8:	00 27       	eor	r16, r16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:47
    rjmp    storeTokenAndReturn
     2fa:	19 c0       	rjmp	.+50     	; 0x32e <handleSetupOrOut>

000002fc <se0>:
se0():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:55
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     2fc:	3b 50       	subi	r19, 0x0B	; 11
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:56
    neg     cnt                 ;[6]
     2fe:	31 95       	neg	r19
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:57
    sub     YL, cnt             ;[7]
     300:	c3 1b       	sub	r28, r19
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:58
    sbci    YH, 0               ;[8]
     302:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:59
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     304:	10 e4       	ldi	r17, 0x40	; 64
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:60
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     306:	1a bf       	out	0x3a, r17	; 58
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:61
    ld      token, y            ;[11]
     308:	08 81       	ld	r16, Y
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:62
    cpi     token, USBPID_DATA0 ;[13]
     30a:	03 3c       	cpi	r16, 0xC3	; 195
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:63
    breq    handleData          ;[14]
     30c:	09 f1       	breq	.+66     	; 0x350 <handleData>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:64
    cpi     token, USBPID_DATA1 ;[15]
     30e:	0b 34       	cpi	r16, 0x4B	; 75
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:65
    breq    handleData          ;[16]
     310:	f9 f0       	breq	.+62     	; 0x350 <handleData>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:66
    lds     shift, usbDeviceAddr;[17]
     312:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <usbDeviceAddr>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:67
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     316:	19 81       	ldd	r17, Y+1	; 0x01
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:68
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     318:	11 0f       	add	r17, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:69
    cpse    x2, shift           ;[22]
     31a:	12 13       	cpse	r17, r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:70
    rjmp    ignorePacket        ;[23]
     31c:	ed cf       	rjmp	.-38     	; 0x2f8 <ignorePacket>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:73
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     31e:	4a 81       	ldd	r20, Y+2	; 0x02
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:74
    rol     x3                  ;[26] shift in LSB of endpoint
     320:	44 1f       	adc	r20, r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:76
#endif
    cpi     token, USBPID_IN    ;[27]
     322:	09 36       	cpi	r16, 0x69	; 105
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:77
    breq    handleIn            ;[28]
     324:	51 f1       	breq	.+84     	; 0x37a <handleIn>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:78
    cpi     token, USBPID_SETUP ;[29]
     326:	0d 32       	cpi	r16, 0x2D	; 45
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:79
    breq    handleSetupOrOut    ;[30]
     328:	11 f0       	breq	.+4      	; 0x32e <handleSetupOrOut>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:80
    cpi     token, USBPID_OUT   ;[31]
     32a:	01 3e       	cpi	r16, 0xE1	; 225
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:81
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     32c:	29 f7       	brne	.-54     	; 0x2f8 <ignorePacket>

0000032e <handleSetupOrOut>:
storeTokenAndReturn():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:94
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     32e:	00 93 eb 01 	sts	0x01EB, r16	; 0x8001eb <usbCurrentTok>

00000332 <doReturn>:
doReturn():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:96
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     332:	3f 91       	pop	r19
     334:	5f 91       	pop	r21
     336:	4f 91       	pop	r20
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	2f 91       	pop	r18
     33e:	6f 91       	pop	r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:97
    USB_LOAD_PENDING(YL)        ;[49]
     340:	ca b7       	in	r28, 0x3a	; 58
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:98
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     342:	c6 fd       	sbrc	r28, 6
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:99
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     344:	65 cf       	rjmp	.-310    	; 0x210 <waitForJ>

00000346 <sofError>:
sofError():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:101
sofError:
    POP_RETI                    ;macro call
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	cf bf       	out	0x3f, r28	; 63
     34c:	cf 91       	pop	r28
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:102
    reti
     34e:	18 95       	reti

00000350 <handleData>:
handleData():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:108

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     350:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <usbCurrentTok>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:109
    tst     shift               ;[20]
     354:	22 23       	and	r18, r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:110
    breq    doReturn            ;[21]
     356:	69 f3       	breq	.-38     	; 0x332 <doReturn>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:111
    lds     x2, usbRxLen        ;[22]
     358:	10 91 e9 01 	lds	r17, 0x01E9	; 0x8001e9 <usbRxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:112
    tst     x2                  ;[24]
     35c:	11 23       	and	r17, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:113
    brne    sendNakAndReti      ;[25]
     35e:	91 f5       	brne	.+100    	; 0x3c4 <sendNakAndReti>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:116
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     360:	34 30       	cpi	r19, 0x04	; 4
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:117
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     362:	92 f1       	brmi	.+100    	; 0x3c8 <sendAckAndReti>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:121
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     364:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <usbRxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:122
    sts     usbRxToken, shift   ;[30]
     368:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <usbRxToken>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:123
    lds     x2, usbInputBufOffset;[32] swap buffers
     36c:	10 91 e6 01 	lds	r17, 0x01E6	; 0x8001e6 <usbInputBufOffset>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:124
    ldi     cnt, USB_BUFSIZE    ;[34]
     370:	3b e0       	ldi	r19, 0x0B	; 11
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:125
    sub     cnt, x2             ;[35]
     372:	31 1b       	sub	r19, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:126
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     374:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <usbInputBufOffset>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:127
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     378:	27 c0       	rjmp	.+78     	; 0x3c8 <sendAckAndReti>

0000037a <handleIn>:
handleIn():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:133

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     37a:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <usbRxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:134
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     37e:	01 30       	cpi	r16, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:135
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     380:	0c f5       	brge	.+66     	; 0x3c4 <sendNakAndReti>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:136
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     382:	0a e5       	ldi	r16, 0x5A	; 90
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:138
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     384:	4f 70       	andi	r20, 0x0F	; 15
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:142
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     386:	49 f4       	brne	.+18     	; 0x39a <handleIn1>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:145
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     388:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <usbTxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:146
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     38c:	34 fd       	sbrc	r19, 4
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:147
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     38e:	1d c0       	rjmp	.+58     	; 0x3ca <sendCntAndReti>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:148
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     390:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <usbTxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:149
    ldi     YL, lo8(usbTxBuf)   ;[43]
     394:	cd ec       	ldi	r28, 0xCD	; 205
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:150
    ldi     YH, hi8(usbTxBuf)   ;[44]
     396:	d1 e0       	ldi	r29, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:151
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     398:	1c c0       	rjmp	.+56     	; 0x3d2 <usbSendAndReti>

0000039a <handleIn1>:
handleIn1():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:169
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     39a:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <usbTxStatus1>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:170
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     39e:	34 fd       	sbrc	r19, 4
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:171
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     3a0:	14 c0       	rjmp	.+40     	; 0x3ca <sendCntAndReti>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:172
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     3a2:	00 93 d8 01 	sts	0x01D8, r16	; 0x8001d8 <usbTxStatus1>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:173
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     3a6:	c9 ed       	ldi	r28, 0xD9	; 217
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:174
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     3a8:	d1 e0       	ldi	r29, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/asmcommon.inc:175
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     3aa:	13 c0       	rjmp	.+38     	; 0x3d2 <usbSendAndReti>

000003ac <bitstuffN>:
bitstuffN():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:236
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
     3ac:	05 27       	eor	r16, r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:237
    ldi     x2, 0           ;[6]
     3ae:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:238
    nop2                    ;[7]
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <bitstuffN+0x6>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:239
    nop                     ;[9]
     3b2:	00 00       	nop
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:240
    out     USBOUT, x1      ;[10] <-- out
     3b4:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:241
    rjmp    didStuffN       ;[0]
     3b6:	1a c0       	rjmp	.+52     	; 0x3ec <didStuffN>

000003b8 <bitstuff6>:
bitstuff6():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:244
    
bitstuff6:
    eor     x1, x4          ;[5]
     3b8:	05 27       	eor	r16, r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:245
    ldi     x2, 0           ;[6] Carry is zero due to brcc
     3ba:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:246
    rol     shift           ;[7] compensate for ror shift at branch destination
     3bc:	22 1f       	adc	r18, r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:247
    rjmp    didStuff6       ;[8]
     3be:	1d c0       	rjmp	.+58     	; 0x3fa <didStuff6>

000003c0 <bitstuff7>:
bitstuff7():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:250

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
     3c0:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:251
    rjmp    didStuff7       ;[3]
     3c2:	21 c0       	rjmp	.+66     	; 0x406 <didStuff7>

000003c4 <sendNakAndReti>:
sendNakAndReti():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:255


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
     3c4:	4a e5       	ldi	r20, 0x5A	; 90
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:256
    rjmp    sendX3AndReti   ;[-17]
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <sendX3AndReti>

000003c8 <sendAckAndReti>:
sendAckAndReti():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:258
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     3c8:	32 ed       	ldi	r19, 0xD2	; 210

000003ca <sendCntAndReti>:
sendCntAndReti():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:260
sendCntAndReti:
    mov     x3, cnt         ;[-16]
     3ca:	43 2f       	mov	r20, r19

000003cc <sendX3AndReti>:
sendX3AndReti():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:262
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
     3cc:	c4 e1       	ldi	r28, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:263
    ldi     YH, 0           ;[-14]
     3ce:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:264
    ldi     cnt, 2          ;[-13]
     3d0:	32 e0       	ldi	r19, 0x02	; 2

000003d2 <usbSendAndReti>:
usbSendAndReti():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:275
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     3d2:	11 b3       	in	r17, 0x11	; 17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:276
    ori     x2, USBMASK     ;[-11]
     3d4:	14 61       	ori	r17, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:277
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     3d6:	94 9a       	sbi	0x12, 4	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:278
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     3d8:	02 b3       	in	r16, 0x12	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:279
    out     USBDDR, x2      ;[-7] <- acquire bus
     3da:	11 bb       	out	0x11, r17	; 17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:281
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     3dc:	54 e1       	ldi	r21, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:282
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     3de:	20 e8       	ldi	r18, 0x80	; 128

000003e0 <txByteLoop>:
txByteLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:284
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
     3e0:	65 e3       	ldi	r22, 0x35	; 53

000003e2 <txBitLoop>:
txBitLoop():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:286
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
     3e2:	20 ff       	sbrs	r18, 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:287
    eor     x1, x4          ;[-2] [8]
     3e4:	05 27       	eor	r16, r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:288
    out     USBOUT, x1      ;[-1] [9] <-- out N
     3e6:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:289
    ror     shift           ;[0] [10]
     3e8:	27 95       	ror	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:290
    ror     x2              ;[1]
     3ea:	17 95       	ror	r17

000003ec <didStuffN>:
didStuffN():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:292
didStuffN:
    cpi     x2, 0xfc        ;[2]
     3ec:	1c 3f       	cpi	r17, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:293
    brcc    bitstuffN       ;[3]
     3ee:	f0 f6       	brcc	.-68     	; 0x3ac <bitstuffN>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:294
    lsr     bitcnt          ;[4]
     3f0:	66 95       	lsr	r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:295
    brcc    txBitLoop       ;[5]
     3f2:	b8 f7       	brcc	.-18     	; 0x3e2 <txBitLoop>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:296
    brne    txBitLoop       ;[6]
     3f4:	b1 f7       	brne	.-20     	; 0x3e2 <txBitLoop>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:298

    sbrs    shift, 0        ;[7]
     3f6:	20 ff       	sbrs	r18, 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:299
    eor     x1, x4          ;[8]
     3f8:	05 27       	eor	r16, r21

000003fa <didStuff6>:
didStuff6():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:301
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
     3fa:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:302
    ror     shift           ;[0] [10]
     3fc:	27 95       	ror	r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:303
    ror     x2              ;[1]
     3fe:	17 95       	ror	r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:304
    cpi     x2, 0xfc        ;[2]
     400:	1c 3f       	cpi	r17, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:305
    brcc    bitstuff6       ;[3]
     402:	d0 f6       	brcc	.-76     	; 0x3b8 <bitstuff6>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:306
    ror     shift           ;[4]
     404:	27 95       	ror	r18

00000406 <didStuff7>:
didStuff7():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:308
didStuff7:
    ror     x2              ;[5]
     406:	17 95       	ror	r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:309
    sbrs    x2, 7           ;[6]
     408:	17 ff       	sbrs	r17, 7
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:310
    eor     x1, x4          ;[7]
     40a:	05 27       	eor	r16, r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:311
    nop                     ;[8]
     40c:	00 00       	nop
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:312
    cpi     x2, 0xfc        ;[9]
     40e:	1c 3f       	cpi	r17, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:313
    out     USBOUT, x1      ;[-1][10] <-- out 7
     410:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:314
    brcc    bitstuff7       ;[0] [11]
     412:	b0 f6       	brcc	.-84     	; 0x3c0 <bitstuff7>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:315
    ld      shift, y+       ;[1]
     414:	29 91       	ld	r18, Y+
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:316
    dec     cnt             ;[3]
     416:	3a 95       	dec	r19
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:317
    brne    txByteLoop      ;[4]
     418:	19 f7       	brne	.-58     	; 0x3e0 <txByteLoop>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:319
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     41a:	0b 7e       	andi	r16, 0xEB	; 235
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:320
    lds     x2, usbNewDeviceAddr;[6]
     41c:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <usbNewDeviceAddr>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:321
    lsl     x2              ;[8] we compare with left shifted address
     420:	11 0f       	add	r17, r17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:322
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
     422:	c6 51       	subi	r28, 0x16	; 22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:323
    sbci    YH, 0           ;[10]
     424:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:324
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     426:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:327
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
     428:	11 f0       	breq	.+4      	; 0x42e <skipAddrAssign>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:328
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     42a:	10 93 e4 01 	sts	0x01E4, r17	; 0x8001e4 <usbDeviceAddr>

0000042e <skipAddrAssign>:
skipAddrAssign():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:331
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
     42e:	10 e4       	ldi	r17, 0x40	; 64
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:332
    USB_STORE_PENDING(x2)   ;[3]
     430:	1a bf       	out	0x3a, r17	; 58
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:333
    ori     x1, USBIDLE     ;[4]
     432:	00 61       	ori	r16, 0x10	; 16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:334
    in      x2, USBDDR      ;[5]
     434:	11 b3       	in	r17, 0x11	; 17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:335
    cbr     x2, USBMASK     ;[6] set both pins to input
     436:	1b 7e       	andi	r17, 0xEB	; 235
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:336
    mov     x3, x1          ;[7]
     438:	40 2f       	mov	r20, r16
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:337
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
     43a:	4b 7e       	andi	r20, 0xEB	; 235
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:338
    ldi     x4, 4           ;[9]
     43c:	54 e0       	ldi	r21, 0x04	; 4

0000043e <se0Delay>:
se0Delay():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:340
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
     43e:	5a 95       	dec	r21
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:341
    brne    se0Delay        ;[11] [14] [17] [20]
     440:	f1 f7       	brne	.-4      	; 0x43e <se0Delay>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:342
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
     442:	02 bb       	out	0x12, r16	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:343
    out     USBDDR, x2      ;[22] <-- release bus now
     444:	11 bb       	out	0x11, r17	; 17
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:344
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
     446:	42 bb       	out	0x12, r20	; 18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrvasm16.inc:345
    rjmp    doReturn
     448:	74 cf       	rjmp	.-280    	; 0x332 <doReturn>

0000044a <EDTMF::EDTMF()>:
_ZN5EDTMFC2Ev():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.h:5
#ifndef EDTMF_h
#define EDTMF_h
#include "Goertzel.h"

class EDTMF{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	ec 01       	movw	r28, r24
     450:	18 82       	st	Y, r1
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	1b 82       	std	Y+3, r1	; 0x03
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	aa ef       	ldi	r26, 0xFA	; 250
     460:	b3 e4       	ldi	r27, 0x43	; 67
     462:	8c 83       	std	Y+4, r24	; 0x04
     464:	9d 83       	std	Y+5, r25	; 0x05
     466:	ae 83       	std	Y+6, r26	; 0x06
     468:	bf 83       	std	Y+7, r27	; 0x07
     46a:	80 e8       	ldi	r24, 0x80	; 128
     46c:	95 e2       	ldi	r25, 0x25	; 37
     46e:	99 87       	std	Y+9, r25	; 0x09
     470:	88 87       	std	Y+8, r24	; 0x08
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	8a 87       	std	Y+10, r24	; 0x0a
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e2       	ldi	r21, 0x20	; 32
     47a:	67 e9       	ldi	r22, 0x97	; 151
     47c:	74 e4       	ldi	r23, 0x44	; 68
     47e:	ce 01       	movw	r24, r28
     480:	85 5b       	subi	r24, 0xB5	; 181
     482:	9f 4f       	sbci	r25, 0xFF	; 255
     484:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	67 ea       	ldi	r22, 0xA7	; 167
     48e:	74 e4       	ldi	r23, 0x44	; 68
     490:	ce 01       	movw	r24, r28
     492:	85 5a       	subi	r24, 0xA5	; 165
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 ea       	ldi	r21, 0xA0	; 160
     49e:	68 eb       	ldi	r22, 0xB8	; 184
     4a0:	74 e4       	ldi	r23, 0x44	; 68
     4a2:	ce 01       	movw	r24, r28
     4a4:	85 59       	subi	r24, 0x95	; 149
     4a6:	9f 4f       	sbci	r25, 0xFF	; 255
     4a8:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e2       	ldi	r21, 0x20	; 32
     4b0:	6c ec       	ldi	r22, 0xCC	; 204
     4b2:	74 e4       	ldi	r23, 0x44	; 68
     4b4:	ce 01       	movw	r24, r28
     4b6:	85 58       	subi	r24, 0x85	; 133
     4b8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ba:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e4       	ldi	r21, 0x40	; 64
     4c2:	6e e2       	ldi	r22, 0x2E	; 46
     4c4:	74 e4       	ldi	r23, 0x44	; 68
     4c6:	ce 01       	movw	r24, r28
     4c8:	85 57       	subi	r24, 0x75	; 117
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	50 e8       	ldi	r21, 0x80	; 128
     4d4:	60 e4       	ldi	r22, 0x40	; 64
     4d6:	74 e4       	ldi	r23, 0x44	; 68
     4d8:	ce 01       	movw	r24, r28
     4da:	85 56       	subi	r24, 0x65	; 101
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	65 e5       	ldi	r22, 0x55	; 85
     4e8:	74 e4       	ldi	r23, 0x44	; 68
     4ea:	ce 01       	movw	r24, r28
     4ec:	85 55       	subi	r24, 0x55	; 85
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	6b e6       	ldi	r22, 0x6B	; 107
     4fa:	74 e4       	ldi	r23, 0x44	; 68
     4fc:	ce 01       	movw	r24, r28
     4fe:	85 54       	subi	r24, 0x45	; 69
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	0e 94 9e 04 	call	0x93c	; 0x93c <Goertzel::Goertzel(float)>
     506:	de 01       	movw	r26, r28
     508:	a5 53       	subi	r26, 0x35	; 53
     50a:	bf 4f       	sbci	r27, 0xFF	; 255
     50c:	80 e1       	ldi	r24, 0x10	; 16
     50e:	e8 e6       	ldi	r30, 0x68	; 104
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	8a 95       	dec	r24
     518:	e1 f7       	brne	.-8      	; 0x512 <EDTMF::EDTMF()+0xc8>
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <setup>:
setup():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:12
#define LED_PIN 15
EDTMF decoder;
void setup() {

  //Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	8f e0       	ldi	r24, 0x0F	; 15
     524:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:13
  serial.begin();
     528:	0e 94 33 06 	call	0xc66	; 0xc66 <HIDSerial::begin()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:15

  while (millis() < 2000) {
     52c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     530:	60 3d       	cpi	r22, 0xD0	; 208
     532:	77 40       	sbci	r23, 0x07	; 7
     534:	81 05       	cpc	r24, r1
     536:	91 05       	cpc	r25, r1
     538:	18 f4       	brcc	.+6      	; 0x540 <setup+0x20>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:16
    serial.poll();
     53a:	0e 94 48 06 	call	0xc90	; 0xc90 <HIDSerial::poll()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:15

  //Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  serial.begin();

  while (millis() < 2000) {
     53e:	f6 cf       	rjmp	.-20     	; 0x52c <setup+0xc>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:19
    serial.poll();
  }

  serial.println(F("DTMF Decoder V0_08P"));
     540:	62 e7       	ldi	r22, 0x72	; 114
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	89 e8       	ldi	r24, 0x89	; 137
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 75 08 	call	0x10ea	; 0x10ea <Print::println(__FlashStringHelper const*)>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:21
  //  pinMode(led, OUTPUT) ;
  decoder.init();
     54c:	8e ea       	ldi	r24, 0xAE	; 174
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 5f 03 	call	0x6be	; 0x6be <EDTMF::init()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:22
  serial.println("EDTMF initialised!");
     554:	68 e7       	ldi	r22, 0x78	; 120
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	89 e8       	ldi	r24, 0x89	; 137
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 99 08 	call	0x1132	; 0x1132 <Print::println(char const*)>
wdt_enable():
c:\users\mss\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     560:	88 e1       	ldi	r24, 0x18	; 24
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	a8 95       	wdr
     56a:	81 bd       	out	0x21, r24	; 33
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	91 bd       	out	0x21, r25	; 33
setup():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:25

  wdt_enable(WDTO_2S);
}
     570:	08 95       	ret

00000572 <loop>:
loop():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:31



uint32_t lastHeartBit = 0;

void loop() {
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	2c 97       	sbiw	r28, 0x0c	; 12
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:34


  String dialStr = "";
     58e:	68 ea       	ldi	r22, 0xA8	; 168
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	ce 01       	movw	r24, r28
     594:	07 96       	adiw	r24, 0x07	; 7
     596:	0e 94 20 09 	call	0x1240	; 0x1240 <String::String(char const*)>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:35
  uint32_t lastCatchTs = millis();
     59a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     59e:	6b 01       	movw	r12, r22
     5a0:	7c 01       	movw	r14, r24
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:38


  while ((millis() - lastCatchTs) < 250) {
     5a2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     5a6:	6c 19       	sub	r22, r12
     5a8:	7d 09       	sbc	r23, r13
     5aa:	8e 09       	sbc	r24, r14
     5ac:	9f 09       	sbc	r25, r15
     5ae:	6a 3f       	cpi	r22, 0xFA	; 250
     5b0:	71 05       	cpc	r23, r1
     5b2:	81 05       	cpc	r24, r1
     5b4:	91 05       	cpc	r25, r1
     5b6:	68 f5       	brcc	.+90     	; 0x612 <loop+0xa0>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:39
    wdt_reset();
     5b8:	a8 95       	wdr
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:40
    serial.poll();
     5ba:	0e 94 48 06 	call	0xc90	; 0xc90 <HIDSerial::poll()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:42

    String lastChar = decoder.getNextChar();
     5be:	6e ea       	ldi	r22, 0xAE	; 174
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	0e 94 82 03 	call	0x704	; 0x704 <EDTMF::getNextChar()>
_ZNK6StringneEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:145
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
  unsigned char operator != (const String &rhs) const {return !equals(rhs);}
  unsigned char operator != (const char *cstr) const {return !equals(cstr);}
     5ca:	68 ea       	ldi	r22, 0xA8	; 168
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <String::equals(char const*) const>
loop():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:43
    if (lastChar != "") {
     5d6:	81 11       	cpse	r24, r1
     5d8:	17 c0       	rjmp	.+46     	; 0x608 <loop+0x96>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:46

      //Serial.println(srt(millis()-lastCatchTs));
      lastCatchTs = millis();
     5da:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
_ZN6StringpLERKS_():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     5e2:	be 01       	movw	r22, r28
     5e4:	6f 5f       	subi	r22, 0xFF	; 255
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	ce 01       	movw	r24, r28
     5ea:	07 96       	adiw	r24, 0x07	; 7
     5ec:	0e 94 cc 09 	call	0x1398	; 0x1398 <String::concat(String const&)>
loop():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:48
      dialStr += lastChar;
      if (dialStr.length() == 1) {
     5f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f2:	9c 85       	ldd	r25, Y+12	; 0x0c
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:49
        serial.print("Reading=> ");
     5f4:	6b e8       	ldi	r22, 0x8B	; 139
     5f6:	70 e0       	ldi	r23, 0x00	; 0
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:48
    if (lastChar != "") {

      //Serial.println(srt(millis()-lastCatchTs));
      lastCatchTs = millis();
      dialStr += lastChar;
      if (dialStr.length() == 1) {
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	11 f0       	breq	.+4      	; 0x600 <loop+0x8e>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:51
        serial.print("Reading=> ");
      } else {
        serial.print(" . ");
     5fc:	66 e9       	ldi	r22, 0x96	; 150
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	89 e8       	ldi	r24, 0x89	; 137
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 69 08 	call	0x10d2	; 0x10d2 <Print::print(char const*)>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:42 (discriminator 1)

  while ((millis() - lastCatchTs) < 250) {
    wdt_reset();
    serial.poll();

    String lastChar = decoder.getNextChar();
     608:	ce 01       	movw	r24, r28
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	0e 94 b1 08 	call	0x1162	; 0x1162 <String::~String()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:38 (discriminator 1)

  String dialStr = "";
  uint32_t lastCatchTs = millis();


  while ((millis() - lastCatchTs) < 250) {
     610:	c8 cf       	rjmp	.-112    	; 0x5a2 <loop+0x30>
_ZNK6StringneEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:145
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
  unsigned char operator != (const String &rhs) const {return !equals(rhs);}
  unsigned char operator != (const char *cstr) const {return !equals(cstr);}
     612:	68 ea       	ldi	r22, 0xA8	; 168
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	07 96       	adiw	r24, 0x07	; 7
     61a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <String::equals(char const*) const>
loop():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:56
        serial.print(" . ");
      }
    }
  }

  if (dialStr != "") {
     61e:	81 11       	cpse	r24, r1
     620:	0d c0       	rjmp	.+26     	; 0x63c <loop+0xca>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:57
    serial.println("");
     622:	68 ea       	ldi	r22, 0xA8	; 168
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	89 e8       	ldi	r24, 0x89	; 137
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 99 08 	call	0x1132	; 0x1132 <Print::println(char const*)>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:58
    serial.println(dialStr);
     62e:	be 01       	movw	r22, r28
     630:	69 5f       	subi	r22, 0xF9	; 249
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	89 e8       	ldi	r24, 0x89	; 137
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 87 08 	call	0x110e	; 0x110e <Print::println(String const&)>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:62
  }


  if ((millis() - lastHeartBit) > 2000) {
     63c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     640:	c0 90 aa 00 	lds	r12, 0x00AA	; 0x8000aa <__data_end>
     644:	d0 90 ab 00 	lds	r13, 0x00AB	; 0x8000ab <__data_end+0x1>
     648:	e0 90 ac 00 	lds	r14, 0x00AC	; 0x8000ac <__data_end+0x2>
     64c:	f0 90 ad 00 	lds	r15, 0x00AD	; 0x8000ad <__data_end+0x3>
     650:	6c 19       	sub	r22, r12
     652:	7d 09       	sbc	r23, r13
     654:	8e 09       	sbc	r24, r14
     656:	9f 09       	sbc	r25, r15
     658:	61 3d       	cpi	r22, 0xD1	; 209
     65a:	77 40       	sbci	r23, 0x07	; 7
     65c:	81 05       	cpc	r24, r1
     65e:	91 05       	cpc	r25, r1
     660:	a0 f0       	brcs	.+40     	; 0x68a <loop+0x118>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:64
    //serial.println("Heat beat...-"+String(lastHeartBit));
    lastHeartBit = millis();
     662:	0e 94 4a 0a 	call	0x1494	; 0x1494 <millis>
     666:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__data_end>
     66a:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__data_end+0x1>
     66e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end+0x2>
     672:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__data_end+0x3>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:65
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     676:	8f e0       	ldi	r24, 0x0F	; 15
     678:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <digitalRead>
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	89 2b       	or	r24, r25
     680:	09 f0       	breq	.+2      	; 0x684 <loop+0x112>
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8f e0       	ldi	r24, 0x0F	; 15
     686:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:69
  }

  //serial.println("Heart Beat...");
  wdt_reset();
     68a:	a8 95       	wdr
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:34
uint32_t lastHeartBit = 0;

void loop() {


  String dialStr = "";
     68c:	ce 01       	movw	r24, r28
     68e:	07 96       	adiw	r24, 0x07	; 7
     690:	0e 94 b1 08 	call	0x1162	; 0x1162 <String::~String()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:70
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
  }

  //serial.println("Heart Beat...");
  wdt_reset();
     694:	2c 96       	adiw	r28, 0x0c	; 12
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <_GLOBAL__sub_I_serial>:
_GLOBAL__sub_I_serial():
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:5
#include "src/EDTMF/EDTMF.h"
#include <HIDSerial.h>
#include <avr/wdt.h> /*Watchdog timer handling*/

HIDSerial serial;
     6ae:	89 e8       	ldi	r24, 0x89	; 137
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 2b 06 	call	0xc56	; 0xc56 <HIDSerial::HIDSerial()>
F:\Projects\CIDL-USB-Bridge/CIDL-USB-Bridge.ino:8

#define LED_PIN 15
EDTMF decoder;
     6b6:	8e ea       	ldi	r24, 0xAE	; 174
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0c 94 25 02 	jmp	0x44a	; 0x44a <EDTMF::EDTMF()>

000006be <EDTMF::init()>:
_ZN5EDTMF4initEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:44





void EDTMF::init() {
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:46
  // initialise class static storage
  Goertzel::init( sampleStore, N , sampling_freq ) ;
     6c8:	48 85       	ldd	r20, Y+8	; 0x08
     6ca:	59 85       	ldd	r21, Y+9	; 0x09
     6cc:	60 e4       	ldi	r22, 0x40	; 64
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0b 96       	adiw	r24, 0x0b	; 11
     6d2:	0e 94 a4 04 	call	0x948	; 0x948 <Goertzel::init(unsigned char*, unsigned int, unsigned int)>
     6d6:	8e 01       	movw	r16, r28
     6d8:	05 5b       	subi	r16, 0xB5	; 181
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	c5 57       	subi	r28, 0x75	; 117
     6de:	df 4f       	sbci	r29, 0xFF	; 255
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:51 (discriminator 2)

  // calculate coefficients for Goertzel objects
  //   must be done after init()
  for ( int i = 0 ; i < 4 ; i++ ) {
    x_goertzel[ i ].getCoefficient(  ) ;
     6e0:	c8 01       	movw	r24, r16
     6e2:	0e 94 cd 04 	call	0x99a	; 0x99a <Goertzel::getCoefficient()>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:52 (discriminator 2)
    y_goertzel[ i ].getCoefficient(  ) ;
     6e6:	c8 01       	movw	r24, r16
     6e8:	80 5c       	subi	r24, 0xC0	; 192
     6ea:	9f 4f       	sbci	r25, 0xFF	; 255
     6ec:	0e 94 cd 04 	call	0x99a	; 0x99a <Goertzel::getCoefficient()>
     6f0:	00 5f       	subi	r16, 0xF0	; 240
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:50 (discriminator 2)
  // initialise class static storage
  Goertzel::init( sampleStore, N , sampling_freq ) ;

  // calculate coefficients for Goertzel objects
  //   must be done after init()
  for ( int i = 0 ; i < 4 ; i++ ) {
     6f4:	0c 17       	cp	r16, r28
     6f6:	1d 07       	cpc	r17, r29
     6f8:	99 f7       	brne	.-26     	; 0x6e0 <EDTMF::init()+0x22>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:56
    x_goertzel[ i ].getCoefficient(  ) ;
    y_goertzel[ i ].getCoefficient(  ) ;
  }

  //Serial.println( "EDTMF initialised!" );
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <EDTMF::getNextChar()>:
_ZN5EDTMF11getNextCharEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:58

String EDTMF::getNextChar() {
     704:	2f 92       	push	r2
     706:	3f 92       	push	r3
     708:	4f 92       	push	r4
     70a:	5f 92       	push	r5
     70c:	6f 92       	push	r6
     70e:	7f 92       	push	r7
     710:	8f 92       	push	r8
     712:	9f 92       	push	r9
     714:	af 92       	push	r10
     716:	bf 92       	push	r11
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	2b 97       	sbiw	r28, 0x0b	; 11
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	6c 01       	movw	r12, r24
     73a:	8b 01       	movw	r16, r22
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:59
  String result = "";
     73c:	68 ea       	ldi	r22, 0xA8	; 168
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	0e 94 20 09 	call	0x1240	; 0x1240 <String::String(char const*)>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:71
        ledOn = false ;
      }
    }
  */

  if ( Goertzel::testDataReady ) {
     744:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Goertzel::testDataReady>
     748:	88 23       	and	r24, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <EDTMF::getNextChar()+0x4a>
     74c:	8a c0       	rjmp	.+276    	; 0x862 <__stack+0x3>
     74e:	48 01       	movw	r8, r16
     750:	8b e4       	ldi	r24, 0x4B	; 75
     752:	88 0e       	add	r8, r24
     754:	91 1c       	adc	r9, r1
     756:	e1 2c       	mov	r14, r1
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:78

    float x_magnitude_best = 0 ;
    int8_t x = -1 ;  // x is row index , -1 marker indicates not set

    float y_magnitude_best = 0 ;
    int8_t y = -1 ;  // y is column index , -1 marker indicates not set
     758:	bb 24       	eor	r11, r11
     75a:	ba 94       	dec	r11
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:77
    // if sample buffer full

    float x_magnitude_best = 0 ;
    int8_t x = -1 ;  // x is row index , -1 marker indicates not set

    float y_magnitude_best = 0 ;
     75c:	19 86       	std	Y+9, r1	; 0x09
     75e:	1a 86       	std	Y+10, r1	; 0x0a
     760:	1b 86       	std	Y+11, r1	; 0x0b
     762:	f1 2c       	mov	r15, r1
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:75

  if ( Goertzel::testDataReady ) {
    // if sample buffer full

    float x_magnitude_best = 0 ;
    int8_t x = -1 ;  // x is row index , -1 marker indicates not set
     764:	9f ef       	ldi	r25, 0xFF	; 255
     766:	9f 83       	std	Y+7, r25	; 0x07
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:74
  */

  if ( Goertzel::testDataReady ) {
    // if sample buffer full

    float x_magnitude_best = 0 ;
     768:	61 2c       	mov	r6, r1
     76a:	71 2c       	mov	r7, r1
     76c:	a1 2c       	mov	r10, r1
     76e:	18 86       	std	Y+8, r1	; 0x08
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:84


    for ( int i = 0 ; i < 4 ; i++ ) {

      // pick the best match (x : rows)
      float x_magnitude = x_goertzel[ i ].detect();
     770:	c4 01       	movw	r24, r8
     772:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Goertzel::detect()>
     776:	1b 01       	movw	r2, r22
     778:	2c 01       	movw	r4, r24
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:85
      if ( x_magnitude > x_magnitude_best ) {
     77a:	93 01       	movw	r18, r6
     77c:	4a 2d       	mov	r20, r10
     77e:	58 85       	ldd	r21, Y+8	; 0x08
     780:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     784:	18 16       	cp	r1, r24
     786:	24 f4       	brge	.+8      	; 0x790 <EDTMF::getNextChar()+0x8c>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:87
        x_magnitude_best = x_magnitude ;
        x = i ;
     788:	ef 82       	std	Y+7, r14	; 0x07
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:86
    for ( int i = 0 ; i < 4 ; i++ ) {

      // pick the best match (x : rows)
      float x_magnitude = x_goertzel[ i ].detect();
      if ( x_magnitude > x_magnitude_best ) {
        x_magnitude_best = x_magnitude ;
     78a:	31 01       	movw	r6, r2
     78c:	a4 2c       	mov	r10, r4
     78e:	58 86       	std	Y+8, r5	; 0x08
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:91
        x = i ;
      }

      // pick the best match (y : columns )
      float y_magnitude = y_goertzel[ i ].detect();
     790:	c4 01       	movw	r24, r8
     792:	80 5c       	subi	r24, 0xC0	; 192
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Goertzel::detect()>
     79a:	1b 01       	movw	r2, r22
     79c:	2c 01       	movw	r4, r24
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:92
      if ( y_magnitude > y_magnitude_best ) {
     79e:	29 85       	ldd	r18, Y+9	; 0x09
     7a0:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a2:	4b 85       	ldd	r20, Y+11	; 0x0b
     7a4:	5f 2d       	mov	r21, r15
     7a6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	2c f4       	brge	.+10     	; 0x7b8 <EDTMF::getNextChar()+0xb4>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:94
        y_magnitude_best = y_magnitude ;
        y = i ;
     7ae:	be 2c       	mov	r11, r14
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:93
      }

      // pick the best match (y : columns )
      float y_magnitude = y_goertzel[ i ].detect();
      if ( y_magnitude > y_magnitude_best ) {
        y_magnitude_best = y_magnitude ;
     7b0:	29 86       	std	Y+9, r2	; 0x09
     7b2:	3a 86       	std	Y+10, r3	; 0x0a
     7b4:	4b 86       	std	Y+11, r4	; 0x0b
     7b6:	f5 2c       	mov	r15, r5
     7b8:	e0 e1       	ldi	r30, 0x10	; 16
     7ba:	8e 0e       	add	r8, r30
     7bc:	91 1c       	adc	r9, r1
     7be:	e3 94       	inc	r14
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:81 (discriminator 2)

    float y_magnitude_best = 0 ;
    int8_t y = -1 ;  // y is column index , -1 marker indicates not set


    for ( int i = 0 ; i < 4 ; i++ ) {
     7c0:	f4 e0       	ldi	r31, 0x04	; 4
     7c2:	ef 12       	cpse	r14, r31
     7c4:	d5 cf       	rjmp	.-86     	; 0x770 <EDTMF::getNextChar()+0x6c>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:119
      */

    }  // for i

    // test if the sample was identified
    if ( x_magnitude_best > threshold && y_magnitude_best > threshold ) {
     7c6:	f8 01       	movw	r30, r16
     7c8:	24 80       	ldd	r2, Z+4	; 0x04
     7ca:	35 80       	ldd	r3, Z+5	; 0x05
     7cc:	46 80       	ldd	r4, Z+6	; 0x06
     7ce:	57 80       	ldd	r5, Z+7	; 0x07
     7d0:	93 01       	movw	r18, r6
     7d2:	4a 2d       	mov	r20, r10
     7d4:	58 85       	ldd	r21, Y+8	; 0x08
     7d6:	c2 01       	movw	r24, r4
     7d8:	b1 01       	movw	r22, r2
     7da:	0e 94 8e 0b 	call	0x171c	; 0x171c <__cmpsf2>
     7de:	87 ff       	sbrs	r24, 7
     7e0:	65 c0       	rjmp	.+202    	; 0x8ac <__stack+0x4d>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:119 (discriminator 1)
     7e2:	29 85       	ldd	r18, Y+9	; 0x09
     7e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e6:	4b 85       	ldd	r20, Y+11	; 0x0b
     7e8:	5f 2d       	mov	r21, r15
     7ea:	c2 01       	movw	r24, r4
     7ec:	b1 01       	movw	r22, r2
     7ee:	0e 94 8e 0b 	call	0x171c	; 0x171c <__cmpsf2>
     7f2:	87 ff       	sbrs	r24, 7
     7f4:	5b c0       	rjmp	.+182    	; 0x8ac <__stack+0x4d>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:122

      // test if we have i consecutive matches to filter spurious results
      if ( x_last == x && y_last == y ) {
     7f6:	f8 01       	movw	r30, r16
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
     7fa:	ff 81       	ldd	r31, Y+7	; 0x07
     7fc:	8f 13       	cpse	r24, r31
     7fe:	4b c0       	rjmp	.+150    	; 0x896 <__stack+0x37>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:122 (discriminator 1)
     800:	f8 01       	movw	r30, r16
     802:	82 81       	ldd	r24, Z+2	; 0x02
     804:	8b 11       	cpse	r24, r11
     806:	47 c0       	rjmp	.+142    	; 0x896 <__stack+0x37>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:123
        if ( repeats < 255 ) repeats ++ ;
     808:	80 81       	ld	r24, Z
     80a:	8f 3f       	cpi	r24, 0xFF	; 255
     80c:	11 f0       	breq	.+4      	; 0x812 <EDTMF::getNextChar()+0x10e>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:123 (discriminator 1)
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 83       	st	Z, r24
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:129
      }
      else {
        repeats = 0 ;
      }

      x_last = x ;
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	f8 01       	movw	r30, r16
     816:	81 83       	std	Z+1, r24	; 0x01
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:130
      y_last = y ;
     818:	b2 82       	std	Z+2, r11	; 0x02
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:132

      if ( repeats == validationRepeats  ) {
     81a:	90 81       	ld	r25, Z
     81c:	82 85       	ldd	r24, Z+10	; 0x0a
     81e:	98 13       	cpse	r25, r24
     820:	3d c0       	rjmp	.+122    	; 0x89c <__stack+0x3d>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:145
        // Serial.print( x ) ;
        // Serial.print( "," ) ;
        // Serial.print( y ) ;
        // Serial.print( ")   failed/rejected matches=" ) ;
        // Serial.println( failedMatches ) ;
        result = decoder[x][y];
     822:	9f 81       	ldd	r25, Y+7	; 0x07
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	98 02       	muls	r25, r24
     828:	f0 01       	movw	r30, r0
     82a:	11 24       	eor	r1, r1
     82c:	e0 0f       	add	r30, r16
     82e:	f1 1f       	adc	r31, r17
     830:	eb 0d       	add	r30, r11
     832:	f1 1d       	adc	r31, r1
     834:	b7 fc       	sbrc	r11, 7
     836:	fa 95       	dec	r31
     838:	e5 53       	subi	r30, 0x35	; 53
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	60 81       	ld	r22, Z
_ZN15StringSumHelperC4Ec():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:218
class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
  StringSumHelper(char c) : String(c) {}
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	0e 94 3f 09 	call	0x127e	; 0x127e <String::String(char)>
_ZN5EDTMF11getNextCharEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:145
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	c6 01       	movw	r24, r12
     84e:	0e 94 94 09 	call	0x1328	; 0x1328 <String::operator=(StringSumHelper&&)>
_ZN15StringSumHelperD4Ev():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	0e 94 b1 08 	call	0x1162	; 0x1162 <String::~String()>
_ZN5EDTMF11getNextCharEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:146
        failedMatches = 0 ;
     85a:	f8 01       	movw	r30, r16
     85c:	13 82       	std	Z+3, r1	; 0x03
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:160
      y_last = -1 ;
      repeats = 0 ;
    }

    // allow ISR to refill the sample buffer.
    Goertzel::testDataReady = false ;
     85e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Goertzel::testDataReady>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:165

    return result;
  }

}
     862:	c6 01       	movw	r24, r12
     864:	2b 96       	adiw	r28, 0x0b	; 11
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	4f 90       	pop	r4
     890:	3f 90       	pop	r3
     892:	2f 90       	pop	r2
     894:	08 95       	ret
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:126
      // test if we have i consecutive matches to filter spurious results
      if ( x_last == x && y_last == y ) {
        if ( repeats < 255 ) repeats ++ ;
      }
      else {
        repeats = 0 ;
     896:	f8 01       	movw	r30, r16
     898:	10 82       	st	Z, r1
     89a:	bb cf       	rjmp	.-138    	; 0x812 <EDTMF::getNextChar()+0x10e>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:148
        // Serial.print( ")   failed/rejected matches=" ) ;
        // Serial.println( failedMatches ) ;
        result = decoder[x][y];
        failedMatches = 0 ;
      }
      else if ( repeats < validationRepeats ) {
     89c:	98 17       	cp	r25, r24
     89e:	f8 f6       	brcc	.-66     	; 0x85e <EDTMF::getNextChar()+0x15a>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:149
        if ( failedMatches < 255 ) failedMatches ++ ;
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	8f 3f       	cpi	r24, 0xFF	; 255
     8a4:	e1 f2       	breq	.-72     	; 0x85e <EDTMF::getNextChar()+0x15a>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:149 (discriminator 1)
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	83 83       	std	Z+3, r24	; 0x03
     8aa:	d9 cf       	rjmp	.-78     	; 0x85e <EDTMF::getNextChar()+0x15a>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:154
      }

    } // if ( x_magnitude_best . . .
    else {
      x_last = -1 ;  //clean
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	f8 01       	movw	r30, r16
     8b0:	81 83       	std	Z+1, r24	; 0x01
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:155
      y_last = -1 ;
     8b2:	82 83       	std	Z+2, r24	; 0x02
F:\Projects\CIDL-USB-Bridge\src\EDTMF/EDTMF.cpp:156
      repeats = 0 ;
     8b4:	10 82       	st	Z, r1
     8b6:	d3 cf       	rjmp	.-90     	; 0x85e <EDTMF::getNextChar()+0x15a>

000008b8 <__vector_16>:
__vector_16():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:47

volatile bool Goertzel::testDataReady = false ; // static declaration in .h


//ADC interrupt service routine
ISR(ADC_vect) {
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:50
  // load sample buffer on sample conversion.
  static uint16_t sampleIndex = 0 ;
  if ( ! Goertzel::testDataReady   ) {
     8d2:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Goertzel::testDataReady>
     8d6:	81 11       	cpse	r24, r1
     8d8:	1a c0       	rjmp	.+52     	; 0x90e <__vector_16+0x56>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:51
    if ( sampleIndex < Goertzel::N  ) {
     8da:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__vector_16::sampleIndex>
     8de:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__vector_16::sampleIndex+0x1>
     8e2:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <Goertzel::N>
     8e6:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <Goertzel::N+0x1>
     8ea:	82 17       	cp	r24, r18
     8ec:	93 07       	cpc	r25, r19
     8ee:	f0 f4       	brcc	.+60     	; 0x92c <__vector_16+0x74>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:52
      *(Goertzel::testData + sampleIndex++ )  = ADCH ; // 8 bits. Direct adressing into byte buffer
     8f0:	25 b1       	in	r18, 0x05	; 5
     8f2:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Goertzel::testData>
     8f6:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <Goertzel::testData+0x1>
     8fa:	ac 01       	movw	r20, r24
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	50 93 8e 01 	sts	0x018E, r21	; 0x80018e <__vector_16::sampleIndex+0x1>
     904:	40 93 8d 01 	sts	0x018D, r20	; 0x80018d <__vector_16::sampleIndex>
     908:	e8 0f       	add	r30, r24
     90a:	f9 1f       	adc	r31, r25
     90c:	20 83       	st	Z, r18
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:59
    else  {
      Goertzel::testDataReady = true ;    // make buffer available to consumer
      sampleIndex = 0 ;
    }
  }
  TIFR = _BV(ICF1); // reset interrupt flag
     90e:	80 e2       	ldi	r24, 0x20	; 32
     910:	88 bf       	out	0x38, r24	; 56
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:60
}
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	5f 91       	pop	r21
     91c:	4f 91       	pop	r20
     91e:	3f 91       	pop	r19
     920:	2f 91       	pop	r18
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:55
  if ( ! Goertzel::testDataReady   ) {
    if ( sampleIndex < Goertzel::N  ) {
      *(Goertzel::testData + sampleIndex++ )  = ADCH ; // 8 bits. Direct adressing into byte buffer
    }
    else  {
      Goertzel::testDataReady = true ;    // make buffer available to consumer
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Goertzel::testDataReady>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:56
      sampleIndex = 0 ;
     932:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__vector_16::sampleIndex+0x1>
     936:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__vector_16::sampleIndex>
     93a:	e9 cf       	rjmp	.-46     	; 0x90e <__vector_16+0x56>

0000093c <Goertzel::Goertzel(float)>:
_ZN8GoertzelC2Ef():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:66


// constructor
Goertzel::Goertzel(float TARGET_FREQUENCY  )
{
  _TARGET_FREQUENCY = TARGET_FREQUENCY; //should be integer of SAMPLING_RATE/N
     93c:	fc 01       	movw	r30, r24
     93e:	40 83       	st	Z, r20
     940:	51 83       	std	Z+1, r21	; 0x01
     942:	62 83       	std	Z+2, r22	; 0x02
     944:	73 83       	std	Z+3, r23	; 0x03
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:67
}
     946:	08 95       	ret

00000948 <Goertzel::init(unsigned char*, unsigned int, unsigned int)>:
_ZN8Goertzel4initEPhjj():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:75
//static method
void Goertzel::init( uint8_t *sampleArray , uint16_t sampleArraySize, uint16_t sampleFrequency ) {
  // set up sample array, number of samples and sample frequency.

  // load class static variables
  testData = sampleArray ;
     948:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <Goertzel::testData+0x1>
     94c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Goertzel::testData>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:76
  N = sampleArraySize ;
     950:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <Goertzel::N+0x1>
     954:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <Goertzel::N>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:77
  SAMPLING_FREQUENCY = sampleFrequency ;
     958:	50 93 91 01 	sts	0x0191, r21	; 0x800191 <Goertzel::SAMPLING_FREQUENCY+0x1>
     95c:	40 93 90 01 	sts	0x0190, r20	; 0x800190 <Goertzel::SAMPLING_FREQUENCY>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:82


  // initialise ADC and Timer1. Timer1 triggers ADC at frequency SAMPLING_FREQUENCY.
  // ISR(ADC_vect) called when conversion complete.
  cli() ;
     960:	f8 94       	cli
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:89
  // -----------------------IF uC is ATMEGA32-----------------------

#ifdef __AVR_ATmega32__

  // Setup Timer1 for chosen sampling frequency.
  TCCR1A = 0;
     962:	1f bc       	out	0x2f, r1	; 47
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:90
  TCCR1B = _BV(CS10)  |    // Bit 2:0 – CS12:0: Clock Select =  no prescaler
     964:	89 e1       	ldi	r24, 0x19	; 25
     966:	8e bd       	out	0x2e, r24	; 46
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:93
           _BV(WGM13) |    // WGM 12 = CTC ICR1 Immediate MAX
           _BV(WGM12);     // WGM 12 ditto
  ICR1 = ( (F_CPU ) / SAMPLING_FREQUENCY ) - 1;
     968:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Goertzel::SAMPLING_FREQUENCY>
     96c:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Goertzel::SAMPLING_FREQUENCY+0x1>
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	74 e2       	ldi	r23, 0x24	; 36
     978:	84 ef       	ldi	r24, 0xF4	; 244
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__divmodsi4>
     980:	21 50       	subi	r18, 0x01	; 1
     982:	31 09       	sbc	r19, r1
     984:	37 bd       	out	0x27, r19	; 39
     986:	26 bd       	out	0x26, r18	; 38
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:97


  // Setup ADC for triggering by timer1; 8bit resolution; Analog Port PC0 (pin A0 ) ADMUX
  ADMUX =  _BV(REFS0) ;     // Fixed AVcc reference voltage for ATMega328P
     988:	80 e4       	ldi	r24, 0x40	; 64
     98a:	87 b9       	out	0x07, r24	; 7
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:98
  ADMUX |= _BV(ADLAR) ;     // left adjust conversion result in ADCH (8bit)
     98c:	3d 9a       	sbi	0x07, 5	; 7
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:102
  //  DIDR |= _BV(ADC0D);   // DIDR0  Digital Input Disable Register 0
  //ADCSRB

  SFIOR = _BV(ADTS2) |    // Bit 2:0  ADTS[2:0]: ADC Auto Trigger Source
     98e:	80 ee       	ldi	r24, 0xE0	; 224
     990:	80 bf       	out	0x30, r24	; 48
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:106
          _BV(ADTS1) |    // Timer/Counter1 Capture Event
          _BV(ADTS0);     // ditto

  ADCSRA = _BV(ADEN) |      // Bit 7   ADEN: ADC Enable
     992:	8b ee       	ldi	r24, 0xEB	; 235
     994:	86 b9       	out	0x06, r24	; 6
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:147


  // ______________________ END _______________________________________


  sei() ;
     996:	78 94       	sei
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:149

}
     998:	08 95       	ret

0000099a <Goertzel::getCoefficient()>:
_ZN8Goertzel14getCoefficientEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:154



// instance method
void Goertzel::getCoefficient( void ) {
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:156
  // previously in constructor. Now SAMPLING_FREQUENCY unknown at invocation time.
  float omega = (2.0 * PI * _TARGET_FREQUENCY) / SAMPLING_FREQUENCY;
     9a8:	2b ed       	ldi	r18, 0xDB	; 219
     9aa:	3f e0       	ldi	r19, 0x0F	; 15
     9ac:	49 ec       	ldi	r20, 0xC9	; 201
     9ae:	50 e4       	ldi	r21, 0x40	; 64
     9b0:	68 81       	ld	r22, Y
     9b2:	79 81       	ldd	r23, Y+1	; 0x01
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	9b 81       	ldd	r25, Y+3	; 0x03
     9b8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24
     9c0:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <Goertzel::SAMPLING_FREQUENCY>
     9c4:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <Goertzel::SAMPLING_FREQUENCY+0x1>
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__floatunsisf>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__divsf3>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:157
  coeff = 2.0 * cos(omega);
     9dc:	0e 94 93 0b 	call	0x1726	; 0x1726 <cos>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
     9e8:	6c 83       	std	Y+4, r22	; 0x04
     9ea:	7d 83       	std	Y+5, r23	; 0x05
     9ec:	8e 83       	std	Y+6, r24	; 0x06
     9ee:	9f 83       	std	Y+7, r25	; 0x07
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:158
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	08 95       	ret

000009fe <Goertzel::detect()>:
_ZN8Goertzel6detectEv():
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:164



// instance method
float Goertzel::detect()
{
     9fe:	2f 92       	push	r2
     a00:	3f 92       	push	r3
     a02:	4f 92       	push	r4
     a04:	5f 92       	push	r5
     a06:	6f 92       	push	r6
     a08:	7f 92       	push	r7
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	00 d0       	rcall	.+0      	; 0xa24 <Goertzel::detect()+0x26>
     a24:	00 d0       	rcall	.+0      	; 0xa26 <Goertzel::detect()+0x28>
     a26:	00 d0       	rcall	.+0      	; 0xa28 <Goertzel::detect()+0x2a>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	9e 83       	std	Y+6, r25	; 0x06
     a2e:	8d 83       	std	Y+5, r24	; 0x05
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:165
  Q2 = 0;
     a30:	dc 01       	movw	r26, r24
     a32:	1c 96       	adiw	r26, 0x0c	; 12
     a34:	1d 92       	st	X+, r1
     a36:	1d 92       	st	X+, r1
     a38:	1d 92       	st	X+, r1
     a3a:	1c 92       	st	X, r1
     a3c:	1f 97       	sbiw	r26, 0x0f	; 15
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:166
  Q1 = 0;
     a3e:	fc 01       	movw	r30, r24
     a40:	10 86       	std	Z+8, r1	; 0x08
     a42:	11 86       	std	Z+9, r1	; 0x09
     a44:	12 86       	std	Z+10, r1	; 0x0a
     a46:	13 86       	std	Z+11, r1	; 0x0b
     a48:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <Goertzel::testData>
     a4c:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <Goertzel::testData+0x1>
     a50:	20 90 92 01 	lds	r2, 0x0192	; 0x800192 <Goertzel::N>
     a54:	30 90 93 01 	lds	r3, 0x0193	; 0x800193 <Goertzel::N+0x1>
     a58:	20 0e       	add	r2, r16
     a5a:	31 1e       	adc	r3, r17
     a5c:	14 96       	adiw	r26, 0x04	; 4
     a5e:	8d 91       	ld	r24, X+
     a60:	9d 91       	ld	r25, X+
     a62:	0d 90       	ld	r0, X+
     a64:	bc 91       	ld	r27, X
     a66:	a0 2d       	mov	r26, r0
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	ab 83       	std	Y+3, r26	; 0x03
     a6e:	bc 83       	std	Y+4, r27	; 0x04
     a70:	ed 81       	ldd	r30, Y+5	; 0x05
     a72:	fe 81       	ldd	r31, Y+6	; 0x06
     a74:	80 84       	ldd	r8, Z+8	; 0x08
     a76:	91 84       	ldd	r9, Z+9	; 0x09
     a78:	a2 84       	ldd	r10, Z+10	; 0x0a
     a7a:	b3 84       	ldd	r11, Z+11	; 0x0b
     a7c:	a5 01       	movw	r20, r10
     a7e:	94 01       	movw	r18, r8
     a80:	69 81       	ldd	r22, Y+1	; 0x01
     a82:	7a 81       	ldd	r23, Y+2	; 0x02
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     a8c:	2b 01       	movw	r4, r22
     a8e:	3c 01       	movw	r6, r24
     a90:	ad 81       	ldd	r26, Y+5	; 0x05
     a92:	be 81       	ldd	r27, Y+6	; 0x06
     a94:	1c 96       	adiw	r26, 0x0c	; 12
     a96:	cd 90       	ld	r12, X+
     a98:	dd 90       	ld	r13, X+
     a9a:	ed 90       	ld	r14, X+
     a9c:	fc 90       	ld	r15, X
     a9e:	1f 97       	sbiw	r26, 0x0f	; 15
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:167 (discriminator 3)
  for ( uint16_t index = 0; index < N; index++)
     aa0:	20 16       	cp	r2, r16
     aa2:	31 06       	cpc	r3, r17
     aa4:	31 f1       	breq	.+76     	; 0xaf2 <Goertzel::detect()+0xf4>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:171 (discriminator 2)
  {
    // byte sample is ( *( testData + index ) );
    float Q0;
    Q0 = coeff * Q1 - Q2 + (float) ( *( testData + index ) - 128 ) ; //  128 for 8bit; 512 for 10bit resolution.
     aa6:	f8 01       	movw	r30, r16
     aa8:	61 91       	ld	r22, Z+
     aaa:	8f 01       	movw	r16, r30
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:172 (discriminator 2)
    Q2 = Q1;
     aac:	1c 96       	adiw	r26, 0x0c	; 12
     aae:	8d 92       	st	X+, r8
     ab0:	9d 92       	st	X+, r9
     ab2:	ad 92       	st	X+, r10
     ab4:	bc 92       	st	X, r11
     ab6:	1f 97       	sbiw	r26, 0x0f	; 15
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:171 (discriminator 2)
  Q1 = 0;
  for ( uint16_t index = 0; index < N; index++)
  {
    // byte sample is ( *( testData + index ) );
    float Q0;
    Q0 = coeff * Q1 - Q2 + (float) ( *( testData + index ) - 128 ) ; //  128 for 8bit; 512 for 10bit resolution.
     ab8:	60 58       	subi	r22, 0x80	; 128
     aba:	77 0b       	sbc	r23, r23
     abc:	07 2e       	mov	r0, r23
     abe:	00 0c       	add	r0, r0
     ac0:	88 0b       	sbc	r24, r24
     ac2:	99 0b       	sbc	r25, r25
     ac4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatsisf>
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	c3 01       	movw	r24, r6
     ad2:	b2 01       	movw	r22, r4
     ad4:	0e 94 21 0b 	call	0x1642	; 0x1642 <__subsf3>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	c5 01       	movw	r24, r10
     ade:	b4 01       	movw	r22, r8
     ae0:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:173 (discriminator 2)
    Q2 = Q1;
    Q1 = Q0;
     ae4:	ed 81       	ldd	r30, Y+5	; 0x05
     ae6:	fe 81       	ldd	r31, Y+6	; 0x06
     ae8:	60 87       	std	Z+8, r22	; 0x08
     aea:	71 87       	std	Z+9, r23	; 0x09
     aec:	82 87       	std	Z+10, r24	; 0x0a
     aee:	93 87       	std	Z+11, r25	; 0x0b
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:167 (discriminator 2)
// instance method
float Goertzel::detect()
{
  Q2 = 0;
  Q1 = 0;
  for ( uint16_t index = 0; index < N; index++)
     af0:	bf cf       	rjmp	.-130    	; 0xa70 <Goertzel::detect()+0x72>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:177
    Q2 = Q1;
    Q1 = Q0;
  }

  /* standard Goertzel processing. */
  float magnitude = sqrt(Q1 * Q1 + Q2 * Q2 - coeff * Q1 * Q2);
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	c5 01       	movw	r24, r10
     af8:	b4 01       	movw	r22, r8
     afa:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     afe:	4b 01       	movw	r8, r22
     b00:	5c 01       	movw	r10, r24
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
     b1a:	4b 01       	movw	r8, r22
     b1c:	5c 01       	movw	r10, r24
     b1e:	a7 01       	movw	r20, r14
     b20:	96 01       	movw	r18, r12
     b22:	c3 01       	movw	r24, r6
     b24:	b2 01       	movw	r22, r4
     b26:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	c5 01       	movw	r24, r10
     b30:	b4 01       	movw	r22, r8
     b32:	0e 94 21 0b 	call	0x1642	; 0x1642 <__subsf3>
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:179
  return magnitude  ;
}
     b36:	26 96       	adiw	r28, 0x06	; 6
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	3f 90       	pop	r3
     b64:	2f 90       	pop	r2
F:\Projects\CIDL-USB-Bridge\src\EDTMF/Goertzel.cpp:177
    Q2 = Q1;
    Q1 = Q0;
  }

  /* standard Goertzel processing. */
  float magnitude = sqrt(Q1 * Q1 + Q2 * Q2 - coeff * Q1 * Q2);
     b66:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <sqrt>

00000b6a <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:142
    }
    inBuffer[0] = 0;
    buffer[i] = 0;
    received = 0;
    return i;
}
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	08 95       	ret

00000b70 <Print::flush()>:
_ZN5Print5flushEv():
     b70:	08 95       	ret

00000b72 <HIDSerial::write(unsigned char)>:
_ZN9HIDSerial5writeEh():
     b72:	cf 93       	push	r28
     b74:	c6 2f       	mov	r28, r22
     b76:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <usbTxStatus1>
     b7a:	84 fd       	sbrc	r24, 4
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <HIDSerial::write(unsigned char)+0x12>
     b7e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <usbPoll>
     b82:	f9 cf       	rjmp	.-14     	; 0xb76 <HIDSerial::write(unsigned char)+0x4>
     b84:	ea eb       	ldi	r30, 0xBA	; 186
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	88 e0       	ldi	r24, 0x08	; 8
     b8a:	df 01       	movw	r26, r30
     b8c:	1d 92       	st	X+, r1
     b8e:	8a 95       	dec	r24
     b90:	e9 f7       	brne	.-6      	; 0xb8c <HIDSerial::write(unsigned char)+0x1a>
     b92:	c0 93 ba 01 	sts	0x01BA, r28	; 0x8001ba <outBuffer>
     b96:	68 e0       	ldi	r22, 0x08	; 8
     b98:	cf 01       	movw	r24, r30
     b9a:	0e 94 be 06 	call	0xd7c	; 0xd7c <usbSetInterrupt>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <usbFunctionRead>:
usbFunctionRead():
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	08 95       	ret

00000baa <usbFunctionWrite>:
usbFunctionWrite():
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
     bb0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <reportId>
     bb4:	81 11       	cpse	r24, r1
     bb6:	2b c0       	rjmp	.+86     	; 0xc0e <usbFunctionWrite+0x64>
     bb8:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <bytesRemaining>
     bbc:	29 2f       	mov	r18, r25
     bbe:	69 17       	cp	r22, r25
     bc0:	08 f4       	brcc	.+2      	; 0xbc4 <usbFunctionWrite+0x1a>
     bc2:	26 2f       	mov	r18, r22
     bc4:	92 1b       	sub	r25, r18
     bc6:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <bytesRemaining>
     bca:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <pos>
     bce:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <pos+0x1>
     bd2:	de 01       	movw	r26, r28
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	ad 01       	movw	r20, r26
     bd8:	4c 1b       	sub	r20, r28
     bda:	5d 0b       	sbc	r21, r29
     bdc:	42 17       	cp	r20, r18
     bde:	53 07       	cpc	r21, r19
     be0:	34 f4       	brge	.+12     	; 0xbee <usbFunctionWrite+0x44>
     be2:	4d 91       	ld	r20, X+
     be4:	44 23       	and	r20, r20
     be6:	b9 f3       	breq	.-18     	; 0xbd6 <usbFunctionWrite+0x2c>
     be8:	40 83       	st	Z, r20
     bea:	31 96       	adiw	r30, 0x01	; 1
     bec:	f4 cf       	rjmp	.-24     	; 0xbd6 <usbFunctionWrite+0x2c>
     bee:	f0 93 97 01 	sts	0x0197, r31	; 0x800197 <pos+0x1>
     bf2:	e0 93 96 01 	sts	0x0196, r30	; 0x800196 <pos>
     bf6:	91 11       	cpse	r25, r1
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <usbFunctionWrite+0x66>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <received>
     c00:	cf 01       	movw	r24, r30
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <pos+0x1>
     c08:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <pos>
     c0c:	10 82       	st	Z, r1
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <usbFunctionSetup>:
usbFunctionSetup():
     c16:	fc 01       	movw	r30, r24
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <reportId>
     c1e:	90 81       	ld	r25, Z
     c20:	90 76       	andi	r25, 0x60	; 96
     c22:	90 32       	cpi	r25, 0x20	; 32
     c24:	b1 f4       	brne	.+44     	; 0xc52 <usbFunctionSetup+0x3c>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	11 f4       	brne	.+4      	; 0xc30 <usbFunctionSetup+0x1a>
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	08 95       	ret
     c30:	89 30       	cpi	r24, 0x09	; 9
     c32:	79 f4       	brne	.+30     	; 0xc52 <usbFunctionSetup+0x3c>
     c34:	2a e9       	ldi	r18, 0x9A	; 154
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <pos+0x1>
     c3c:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <pos>
     c40:	86 81       	ldd	r24, Z+6	; 0x06
     c42:	81 32       	cpi	r24, 0x21	; 33
     c44:	18 f4       	brcc	.+6      	; 0xc4c <usbFunctionSetup+0x36>
     c46:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <bytesRemaining>
     c4a:	f0 cf       	rjmp	.-32     	; 0xc2c <usbFunctionSetup+0x16>
     c4c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <bytesRemaining>
     c50:	ed cf       	rjmp	.-38     	; 0xc2c <usbFunctionSetup+0x16>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	08 95       	ret

00000c56 <HIDSerial::HIDSerial()>:
_ZN5PrintC4Ev():
     c56:	fc 01       	movw	r30, r24
     c58:	13 82       	std	Z+3, r1	; 0x03
     c5a:	12 82       	std	Z+2, r1	; 0x02
_ZN9HIDSerialC2Ev():
     c5c:	2e e9       	ldi	r18, 0x9E	; 158
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	31 83       	std	Z+1, r19	; 0x01
     c62:	20 83       	st	Z, r18
     c64:	08 95       	ret

00000c66 <HIDSerial::begin()>:
_ZN9HIDSerial5beginEv():
     c66:	f8 94       	cli
     c68:	8e 98       	cbi	0x11, 6	; 17
     c6a:	96 98       	cbi	0x12, 6	; 18
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	39 f0       	breq	.+14     	; 0xc80 <HIDSerial::begin()+0x1a>
_delay_ms():
     c72:	ef e9       	ldi	r30, 0x9F	; 159
     c74:	ff e0       	ldi	r31, 0x0F	; 15
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <HIDSerial::begin()+0x10>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <HIDSerial::begin()+0x16>
     c7c:	00 00       	nop
     c7e:	f7 cf       	rjmp	.-18     	; 0xc6e <HIDSerial::begin()+0x8>
_ZN9HIDSerial5beginEv():
     c80:	8e 9a       	sbi	0x11, 6	; 17
     c82:	96 9a       	sbi	0x12, 6	; 18
     c84:	0e 94 1b 08 	call	0x1036	; 0x1036 <usbInit>
     c88:	78 94       	sei
     c8a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <received>
     c8e:	08 95       	ret

00000c90 <HIDSerial::poll()>:
_ZN9HIDSerial4pollEv():
     c90:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <usbPoll>

00000c94 <HIDSerial::write8(unsigned char const*, unsigned int)>:
_ZN9HIDSerial6write8EPKhj():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:158
  return 1;
}

// write up to 8 characters
size_t HIDSerial::write8(const uint8_t *buffer, size_t size)
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	d6 2f       	mov	r29, r22
     c9e:	c7 2f       	mov	r28, r23
     ca0:	8a 01       	movw	r16, r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:160
  unsigned char i;
  while(!usbInterruptIsReady()) {
     ca2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <usbTxStatus1>
     ca6:	84 fd       	sbrc	r24, 4
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <HIDSerial::write8(unsigned char const*, unsigned int)+0x1c>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:161
    usbPoll();
     caa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <usbPoll>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:160

// write up to 8 characters
size_t HIDSerial::write8(const uint8_t *buffer, size_t size)
{
  unsigned char i;
  while(!usbInterruptIsReady()) {
     cae:	f9 cf       	rjmp	.-14     	; 0xca2 <HIDSerial::write8(unsigned char const*, unsigned int)+0xe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:163
    usbPoll();
  }
  memset(outBuffer, 0, OUT_BUFFER_SIZE);
     cb0:	ea eb       	ldi	r30, 0xBA	; 186
     cb2:	f1 e0       	ldi	r31, 0x01	; 1
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	df 01       	movw	r26, r30
     cb8:	1d 92       	st	X+, r1
     cba:	8a 95       	dec	r24
     cbc:	e9 f7       	brne	.-6      	; 0xcb8 <HIDSerial::write8(unsigned char const*, unsigned int)+0x24>
     cbe:	ed 2f       	mov	r30, r29
     cc0:	fc 2f       	mov	r31, r28
     cc2:	aa eb       	ldi	r26, 0xBA	; 186
     cc4:	b1 e0       	ldi	r27, 0x01	; 1
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
     cc8:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:164 (discriminator 4)
  for(i=0;i<size && i<OUT_BUFFER_SIZE; i++) {
     cca:	0c 17       	cp	r16, r28
     ccc:	1d 07       	cpc	r17, r29
     cce:	49 f0       	breq	.+18     	; 0xce2 <HIDSerial::write8(unsigned char const*, unsigned int)+0x4e>
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:164 (discriminator 2)
     cd4:	89 30       	cpi	r24, 0x09	; 9
     cd6:	91 05       	cpc	r25, r1
     cd8:	21 f0       	breq	.+8      	; 0xce2 <HIDSerial::write8(unsigned char const*, unsigned int)+0x4e>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:165 (discriminator 3)
    outBuffer[i] = buffer[i];
     cda:	21 91       	ld	r18, Z+
     cdc:	2d 93       	st	X+, r18
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:164 (discriminator 3)
  unsigned char i;
  while(!usbInterruptIsReady()) {
    usbPoll();
  }
  memset(outBuffer, 0, OUT_BUFFER_SIZE);
  for(i=0;i<size && i<OUT_BUFFER_SIZE; i++) {
     cde:	ec 01       	movw	r28, r24
     ce0:	f4 cf       	rjmp	.-24     	; 0xcca <HIDSerial::write8(unsigned char const*, unsigned int)+0x36>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:167
    outBuffer[i] = buffer[i];
  }
  usbSetInterrupt(outBuffer, OUT_BUFFER_SIZE);
     ce2:	68 e0       	ldi	r22, 0x08	; 8
     ce4:	8a eb       	ldi	r24, 0xBA	; 186
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 be 06 	call	0xd7c	; 0xd7c <usbSetInterrupt>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:169
  return (i);
}
     cec:	ce 01       	movw	r24, r28
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <HIDSerial::write(unsigned char const*, unsigned int)>:
_ZN9HIDSerial5writeEPKhj():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:173

// write a string
size_t HIDSerial::write(const uint8_t *buffer, size_t size)
{
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	7c 01       	movw	r14, r24
     d10:	6b 01       	movw	r12, r22
     d12:	5a 01       	movw	r10, r20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:176
  size_t count = 0;
  unsigned char i;
  for(i=0; i< (size/OUT_BUFFER_SIZE) + 1; i++) {
     d14:	8a 01       	movw	r16, r20
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	16 95       	lsr	r17
     d1a:	07 95       	ror	r16
     d1c:	9a 95       	dec	r25
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <HIDSerial::write(unsigned char const*, unsigned int)+0x20>
     d20:	0f 5f       	subi	r16, 0xFF	; 255
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	91 2c       	mov	r9, r1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:174
}

// write a string
size_t HIDSerial::write(const uint8_t *buffer, size_t size)
{
  size_t count = 0;
     d26:	d0 e0       	ldi	r29, 0x00	; 0
     d28:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:176 (discriminator 2)
  unsigned char i;
  for(i=0; i< (size/OUT_BUFFER_SIZE) + 1; i++) {
     d2a:	69 2d       	mov	r22, r9
     d2c:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:180 (discriminator 2)
    count += write8(buffer+i*OUT_BUFFER_SIZE, (size<(count+OUT_BUFFER_SIZE)) ? (size-count) : OUT_BUFFER_SIZE);
  }
  return count;
}
     d2e:	ce 01       	movw	r24, r28
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:176 (discriminator 2)
// write a string
size_t HIDSerial::write(const uint8_t *buffer, size_t size)
{
  size_t count = 0;
  unsigned char i;
  for(i=0; i< (size/OUT_BUFFER_SIZE) + 1; i++) {
     d30:	60 17       	cp	r22, r16
     d32:	71 07       	cpc	r23, r17
     d34:	b8 f4       	brcc	.+46     	; 0xd64 <HIDSerial::write(unsigned char const*, unsigned int)+0x6c>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:177
    count += write8(buffer+i*OUT_BUFFER_SIZE, (size<(count+OUT_BUFFER_SIZE)) ? (size-count) : OUT_BUFFER_SIZE);
     d36:	08 96       	adiw	r24, 0x08	; 8
     d38:	a5 01       	movw	r20, r10
     d3a:	4c 1b       	sub	r20, r28
     d3c:	5d 0b       	sbc	r21, r29
     d3e:	a8 16       	cp	r10, r24
     d40:	b9 06       	cpc	r11, r25
     d42:	10 f0       	brcs	.+4      	; 0xd48 <HIDSerial::write(unsigned char const*, unsigned int)+0x50>
     d44:	48 e0       	ldi	r20, 0x08	; 8
     d46:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:177 (discriminator 4)
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	8a 95       	dec	r24
     d50:	e1 f7       	brne	.-8      	; 0xd4a <HIDSerial::write(unsigned char const*, unsigned int)+0x52>
     d52:	6c 0d       	add	r22, r12
     d54:	7d 1d       	adc	r23, r13
     d56:	c7 01       	movw	r24, r14
     d58:	0e 94 4a 06 	call	0xc94	; 0xc94 <HIDSerial::write8(unsigned char const*, unsigned int)>
     d5c:	c8 0f       	add	r28, r24
     d5e:	d9 1f       	adc	r29, r25
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:176 (discriminator 4)
// write a string
size_t HIDSerial::write(const uint8_t *buffer, size_t size)
{
  size_t count = 0;
  unsigned char i;
  for(i=0; i< (size/OUT_BUFFER_SIZE) + 1; i++) {
     d60:	93 94       	inc	r9
     d62:	e3 cf       	rjmp	.-58     	; 0xd2a <HIDSerial::write(unsigned char const*, unsigned int)+0x32>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/HIDSerial.cpp:180
    count += write8(buffer+i*OUT_BUFFER_SIZE, (size<(count+OUT_BUFFER_SIZE)) ? (size-count) : OUT_BUFFER_SIZE);
  }
  return count;
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	08 95       	ret

00000d7c <usbSetInterrupt>:
usbSetInterrupt():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:244
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     d7c:	cf 93       	push	r28
     d7e:	c6 2f       	mov	r28, r22
usbGenericSetInterrupt():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:228

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     d80:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <usbTxStatus1>
     d84:	24 ff       	sbrs	r18, 4
     d86:	19 c0       	rjmp	.+50     	; 0xdba <usbSetInterrupt+0x3e>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:229
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     d88:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <usbTxStatus1+0x1>
     d8c:	38 e8       	ldi	r19, 0x88	; 136
     d8e:	23 27       	eor	r18, r19
     d90:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <usbTxStatus1+0x1>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:234
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
     d94:	2c 2f       	mov	r18, r28
     d96:	fc 01       	movw	r30, r24
     d98:	aa ed       	ldi	r26, 0xDA	; 218
     d9a:	b1 e0       	ldi	r27, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:236
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     d9c:	81 91       	ld	r24, Z+
     d9e:	8d 93       	st	X+, r24
     da0:	21 50       	subi	r18, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:237
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     da2:	12 16       	cp	r1, r18
     da4:	dc f3       	brlt	.-10     	; 0xd9c <usbSetInterrupt+0x20>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:238
    usbCrc16Append(&txStatus->buffer[1], len);
     da6:	6c 2f       	mov	r22, r28
     da8:	8a ed       	ldi	r24, 0xDA	; 218
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 00 01 	call	0x200	; 0x200 <usbCrc16Append>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:239
    txStatus->len = len + 4;    /* len must be given including sync byte */
     db0:	cc 5f       	subi	r28, 0xFC	; 252
     db2:	c0 93 d8 01 	sts	0x01D8, r28	; 0x8001d8 <usbTxStatus1>
usbSetInterrupt():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:246
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret
usbGenericSetInterrupt():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:231
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     dba:	2a e5       	ldi	r18, 0x5A	; 90
     dbc:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <usbTxStatus1>
     dc0:	e9 cf       	rjmp	.-46     	; 0xd94 <usbSetInterrupt+0x18>

00000dc2 <usbPoll>:
usbPoll():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:569
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:573
schar   len;
uchar   i;

    len = usbRxLen - 3;
     dc6:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <usbRxLen>
     dca:	63 50       	subi	r22, 0x03	; 3
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:574
    if(len >= 0){
     dcc:	67 fd       	sbrc	r22, 7
     dce:	ac c0       	rjmp	.+344    	; 0xf28 <usbPoll+0x166>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:581
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     dd0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <usbInputBufOffset>
     dd4:	cc e0       	ldi	r28, 0x0C	; 12
     dd6:	d0 e0       	ldi	r29, 0x00	; 0
     dd8:	c8 1b       	sub	r28, r24
     dda:	d1 09       	sbc	r29, r1
     ddc:	c3 51       	subi	r28, 0x13	; 19
     dde:	de 4f       	sbci	r29, 0xFE	; 254
usbProcessRx():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:438
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     de0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <usbRxToken>
     de4:	8d 32       	cpi	r24, 0x2D	; 45
     de6:	09 f0       	breq	.+2      	; 0xdea <usbPoll+0x28>
     de8:	dd c0       	rjmp	.+442    	; 0xfa4 <usbPoll+0x1e2>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:439
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     dea:	68 30       	cpi	r22, 0x08	; 8
     dec:	09 f0       	breq	.+2      	; 0xdf0 <usbPoll+0x2e>
     dee:	9a c0       	rjmp	.+308    	; 0xf24 <usbPoll+0x162>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:442
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     df0:	83 ec       	ldi	r24, 0xC3	; 195
     df2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <usbTxBuf>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:443
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     df6:	8a e5       	ldi	r24, 0x5A	; 90
     df8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbTxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:444
        usbMsgFlags = 0;
     dfc:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <usbMsgFlags>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:445
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     e00:	88 81       	ld	r24, Y
     e02:	80 76       	andi	r24, 0x60	; 96
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:446
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     e04:	79 f0       	breq	.+30     	; 0xe24 <usbPoll+0x62>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:447
            replyLen = usbFunctionSetup(data);
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 0b 06 	call	0xc16	; 0xc16 <usbFunctionSetup>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:452
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	09 f4       	brne	.+2      	; 0xe12 <usbPoll+0x50>
     e10:	81 c0       	rjmp	.+258    	; 0xf14 <usbPoll+0x152>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:465
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     e12:	9f 81       	ldd	r25, Y+7	; 0x07
     e14:	91 11       	cpse	r25, r1
     e16:	84 c0       	rjmp	.+264    	; 0xf20 <usbPoll+0x15e>
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	98 17       	cp	r25, r24
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <usbPoll+0x5e>
     e1e:	80 c0       	rjmp	.+256    	; 0xf20 <usbPoll+0x15e>
     e20:	89 2f       	mov	r24, r25
     e22:	7e c0       	rjmp	.+252    	; 0xf20 <usbPoll+0x15e>
usbDriverSetup():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:364
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     e24:	2a 81       	ldd	r18, Y+2	; 0x02
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:369
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     e26:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <usbTxBuf+0x9>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:370
    SWITCH_START(rq->bRequest)
     e2a:	99 81       	ldd	r25, Y+1	; 0x01
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:371
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     e2c:	91 11       	cpse	r25, r1
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <usbPoll+0x82>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:379
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     e30:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <usbTxBuf+0xa>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:363
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e34:	26 ed       	ldi	r18, 0xD6	; 214
     e36:	31 e0       	ldi	r19, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:380
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     e38:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:410
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     e3a:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <usbMsgPtr+0x1>
     e3e:	20 93 e7 01 	sts	0x01E7, r18	; 0x8001e7 <usbMsgPtr>
     e42:	e7 cf       	rjmp	.-50     	; 0xe12 <usbPoll+0x50>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:388
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     e44:	95 30       	cpi	r25, 0x05	; 5
     e46:	29 f4       	brne	.+10     	; 0xe52 <usbPoll+0x90>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:389
        usbNewDeviceAddr = value;
     e48:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <usbNewDeviceAddr>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:363
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e4c:	26 ed       	ldi	r18, 0xD6	; 214
     e4e:	31 e0       	ldi	r19, 0x01	; 1
     e50:	f4 cf       	rjmp	.-24     	; 0xe3a <usbPoll+0x78>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:391
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     e52:	96 30       	cpi	r25, 0x06	; 6
     e54:	09 f0       	breq	.+2      	; 0xe58 <usbPoll+0x96>
     e56:	47 c0       	rjmp	.+142    	; 0xee6 <usbPoll+0x124>
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
usbDriverDescriptor():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:315
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     e5a:	91 30       	cpi	r25, 0x01	; 1
     e5c:	41 f4       	brne	.+16     	; 0xe6e <usbPoll+0xac>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:316
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     e5e:	85 ec       	ldi	r24, 0xC5	; 197
     e60:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:329
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
        SWITCH_CASE(1)
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     e62:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     e66:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     e6a:	82 e1       	ldi	r24, 0x12	; 18
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:317
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	59 f4       	brne	.+22     	; 0xe88 <usbPoll+0xc6>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:318
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     e72:	83 ea       	ldi	r24, 0xA3	; 163
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     e7a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     e7e:	82 e2       	ldi	r24, 0x22	; 34
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:351
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     e80:	90 e4       	ldi	r25, 0x40	; 64
     e82:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <usbMsgFlags>
     e86:	c5 cf       	rjmp	.-118    	; 0xe12 <usbPoll+0x50>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:319
    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     e88:	93 30       	cpi	r25, 0x03	; 3
     e8a:	c9 f4       	brne	.+50     	; 0xebe <usbPoll+0xfc>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:326
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
     e8c:	21 11       	cpse	r18, r1
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <usbPoll+0xde>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:327
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     e90:	8d ef       	ldi	r24, 0xFD	; 253
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     e98:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	f0 cf       	rjmp	.-32     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:328
        SWITCH_CASE(1)
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	19 f4       	brne	.+6      	; 0xeaa <usbPoll+0xe8>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:329
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     ea4:	8b ee       	ldi	r24, 0xEB	; 235
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	dc cf       	rjmp	.-72     	; 0xe62 <usbPoll+0xa0>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:330
        SWITCH_CASE(2)
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	49 f7       	brne	.-46     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:331
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     eae:	87 ed       	ldi	r24, 0xD7	; 215
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     eb6:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     eba:	84 e1       	ldi	r24, 0x14	; 20
     ebc:	e1 cf       	rjmp	.-62     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:341
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     ebe:	91 32       	cpi	r25, 0x21	; 33
     ec0:	41 f4       	brne	.+16     	; 0xed2 <usbPoll+0x110>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:342
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     ec2:	85 eb       	ldi	r24, 0xB5	; 181
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     eca:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     ece:	89 e0       	ldi	r24, 0x09	; 9
     ed0:	d7 cf       	rjmp	.-82     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:343
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     ed2:	92 32       	cpi	r25, 0x22	; 34
     ed4:	a9 f6       	brne	.-86     	; 0xe80 <usbPoll+0xbe>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:344
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     ed6:	86 e8       	ldi	r24, 0x86	; 134
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
     ede:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
     ee2:	8d e1       	ldi	r24, 0x1D	; 29
     ee4:	cd cf       	rjmp	.-102    	; 0xe80 <usbPoll+0xbe>
usbDriverSetup():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:394
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     ee6:	98 30       	cpi	r25, 0x08	; 8
     ee8:	71 f0       	breq	.+28     	; 0xf06 <usbPoll+0x144>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:397
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     eea:	99 30       	cpi	r25, 0x09	; 9
     eec:	19 f4       	brne	.+6      	; 0xef4 <usbPoll+0x132>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:398
        usbConfiguration = value;
     eee:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <usbConfiguration>
     ef2:	ac cf       	rjmp	.-168    	; 0xe4c <usbPoll+0x8a>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:400
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     ef4:	9a 30       	cpi	r25, 0x0A	; 10
     ef6:	59 f0       	breq	.+22     	; 0xf0e <usbPoll+0x14c>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:403
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     ef8:	9b 30       	cpi	r25, 0x0B	; 11
     efa:	09 f0       	breq	.+2      	; 0xefe <usbPoll+0x13c>
     efc:	a7 cf       	rjmp	.-178    	; 0xe4c <usbPoll+0x8a>
usbResetDataToggling():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:198
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     efe:	9b e4       	ldi	r25, 0x4B	; 75
     f00:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <usbTxStatus1+0x1>
     f04:	a3 cf       	rjmp	.-186    	; 0xe4c <usbPoll+0x8a>
usbDriverSetup():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:395
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     f06:	2c ee       	ldi	r18, 0xEC	; 236
     f08:	31 e0       	ldi	r19, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:401
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	96 cf       	rjmp	.-212    	; 0xe3a <usbPoll+0x78>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:363
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f0e:	26 ed       	ldi	r18, 0xD6	; 214
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	fb cf       	rjmp	.-10     	; 0xf0a <usbPoll+0x148>
usbProcessRx():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:454
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     f14:	98 81       	ld	r25, Y
     f16:	97 fd       	sbrc	r25, 7
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:456
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     f18:	8e 81       	ldd	r24, Y+6	; 0x06
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:461
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     f1a:	90 e8       	ldi	r25, 0x80	; 128
     f1c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <usbMsgFlags>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:471
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     f20:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
usbPoll():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:586
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     f24:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <usbRxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:589
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     f28:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <usbTxLen>
     f2c:	84 ff       	sbrs	r24, 4
     f2e:	2d c0       	rjmp	.+90     	; 0xf8a <usbPoll+0x1c8>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:590
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     f30:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <usbMsgLen>
     f34:	cf 3f       	cpi	r28, 0xFF	; 255
     f36:	49 f1       	breq	.+82     	; 0xf8a <usbPoll+0x1c8>
     f38:	6c 2f       	mov	r22, r28
     f3a:	c9 30       	cpi	r28, 0x09	; 9
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <usbPoll+0x17e>
     f3e:	68 e0       	ldi	r22, 0x08	; 8
usbBuildTxBlock():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:533
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     f40:	8c 2f       	mov	r24, r28
     f42:	86 1b       	sub	r24, r22
     f44:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:534
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     f48:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usbTxBuf>
     f4c:	98 e8       	ldi	r25, 0x88	; 136
     f4e:	89 27       	eor	r24, r25
     f50:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <usbTxBuf>
usbDeviceRead():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:493
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     f54:	cc 23       	and	r28, r28
     f56:	61 f0       	breq	.+24     	; 0xf70 <usbPoll+0x1ae>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:495
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     f58:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usbMsgFlags>
     f5c:	87 ff       	sbrs	r24, 7
     f5e:	35 c0       	rjmp	.+106    	; 0xfca <usbPoll+0x208>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:496
            len = usbFunctionRead(data, len);
     f60:	8e ec       	ldi	r24, 0xCE	; 206
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 d3 05 	call	0xba6	; 0xba6 <usbFunctionRead>
     f68:	c8 2f       	mov	r28, r24
usbBuildTxBlock():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:536
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     f6a:	89 30       	cpi	r24, 0x09	; 9
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <usbPoll+0x1ae>
     f6e:	5e c0       	rjmp	.+188    	; 0x102c <usbPoll+0x26a>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:537
        usbCrc16Append(&usbTxBuf[1], len);
     f70:	6c 2f       	mov	r22, r28
     f72:	8e ec       	ldi	r24, 0xCE	; 206
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 00 01 	call	0x200	; 0x200 <usbCrc16Append>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:538
        len += 4;           /* length including sync byte */
     f7a:	cc 5f       	subi	r28, 0xFC	; 252
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:539
        if(len < 12)        /* a partial package identifies end of message */
     f7c:	cc 30       	cpi	r28, 0x0C	; 12
     f7e:	19 f0       	breq	.+6      	; 0xf86 <usbPoll+0x1c4>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:540
            usbMsgLen = USB_NO_MSG;
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:545
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     f86:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <usbTxLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:542
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     f8a:	84 e1       	ldi	r24, 0x14	; 20
usbPoll():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:595
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     f8c:	90 b3       	in	r25, 0x10	; 16
     f8e:	94 71       	andi	r25, 0x14	; 20
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:596
        if(usbLineStatus != 0)  /* SE0 has ended */
     f90:	31 f4       	brne	.+12     	; 0xf9e <usbPoll+0x1dc>
     f92:	81 50       	subi	r24, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:594 (discriminator 2)
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     f94:	d9 f7       	brne	.-10     	; 0xf8c <usbPoll+0x1ca>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:600
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     f96:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <usbNewDeviceAddr>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:601
    usbDeviceAddr = 0;
     f9a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <usbDeviceAddr>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:606
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret
usbProcessRx():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:474
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     fa4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usbMsgFlags>
     fa8:	87 ff       	sbrs	r24, 7
     faa:	bc cf       	rjmp	.-136    	; 0xf24 <usbPoll+0x162>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:475
            uchar rval = usbFunctionWrite(data, len);
     fac:	ce 01       	movw	r24, r28
     fae:	0e 94 d5 05 	call	0xbaa	; 0xbaa <usbFunctionWrite>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:476
            if(rval == 0xff){   /* an error occurred */
     fb2:	8f 3f       	cpi	r24, 0xFF	; 255
     fb4:	21 f4       	brne	.+8      	; 0xfbe <usbPoll+0x1fc>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:477
                usbTxLen = USBPID_STALL;
     fb6:	8e e1       	ldi	r24, 0x1E	; 30
     fb8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbTxLen>
     fbc:	b3 cf       	rjmp	.-154    	; 0xf24 <usbPoll+0x162>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:478
            }else if(rval != 0){    /* This was the final package */
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <usbPoll+0x202>
     fc2:	b0 cf       	rjmp	.-160    	; 0xf24 <usbPoll+0x162>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:479
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     fc4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <usbMsgLen>
     fc8:	ad cf       	rjmp	.-166    	; 0xf24 <usbPoll+0x162>
usbDeviceRead():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:501
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     fca:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <usbMsgPtr>
     fce:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <usbMsgPtr+0x1>
     fd2:	a9 01       	movw	r20, r18
     fd4:	4d 5c       	subi	r20, 0xCD	; 205
     fd6:	51 40       	sbci	r21, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:502
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     fd8:	86 ff       	sbrs	r24, 6
     fda:	1b c0       	rjmp	.+54     	; 0x1012 <usbPoll+0x250>
     fdc:	ad ec       	ldi	r26, 0xCD	; 205
     fde:	b1 e0       	ldi	r27, 0x01	; 1
     fe0:	96 2f       	mov	r25, r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:504
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     fe2:	fa 01       	movw	r30, r20
     fe4:	ea 0f       	add	r30, r26
     fe6:	fb 1f       	adc	r31, r27
     fe8:	e4 91       	lpm	r30, Z
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:505
                    *data++ = c;
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	ec 93       	st	X, r30
     fee:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:507
                    r++;
                }while(--i);
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	91 11       	cpse	r25, r1
     ff6:	f5 cf       	rjmp	.-22     	; 0xfe2 <usbPoll+0x220>
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	86 0f       	add	r24, r22
    1000:	82 0f       	add	r24, r18
    1002:	93 2f       	mov	r25, r19
    1004:	91 1d       	adc	r25, r1
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:514
                do{
                    *data++ = *((uchar *)r);
                    r++;
                }while(--i);
            }
            usbMsgPtr = r;
    1006:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <usbMsgPtr+0x1>
    100a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <usbMsgPtr>
    100e:	c6 2f       	mov	r28, r22
    1010:	af cf       	rjmp	.-162    	; 0xf70 <usbPoll+0x1ae>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:502
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1012:	ed ec       	ldi	r30, 0xCD	; 205
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	96 2f       	mov	r25, r22
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:510
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    1018:	da 01       	movw	r26, r20
    101a:	ae 0f       	add	r26, r30
    101c:	bf 1f       	adc	r27, r31
    101e:	8c 91       	ld	r24, X
    1020:	81 83       	std	Z+1, r24	; 0x01
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:512
                    r++;
                }while(--i);
    1022:	91 50       	subi	r25, 0x01	; 1
    1024:	31 96       	adiw	r30, 0x01	; 1
    1026:	91 11       	cpse	r25, r1
    1028:	f7 cf       	rjmp	.-18     	; 0x1018 <usbPoll+0x256>
    102a:	e6 cf       	rjmp	.-52     	; 0xff8 <usbPoll+0x236>
usbBuildTxBlock():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:543
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:542
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    1032:	ce e1       	ldi	r28, 0x1E	; 30
    1034:	a8 cf       	rjmp	.-176    	; 0xf86 <usbPoll+0x1c4>

00001036 <usbInit>:
usbInit():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:613
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    1036:	85 b7       	in	r24, 0x35	; 53
    1038:	82 60       	ori	r24, 0x02	; 2
    103a:	85 bf       	out	0x35, r24	; 53
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:618
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    103c:	8b b7       	in	r24, 0x3b	; 59
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8b bf       	out	0x3b, r24	; 59
usbResetDataToggling():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:198
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1042:	e8 ed       	ldi	r30, 0xD8	; 216
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	8b e4       	ldi	r24, 0x4B	; 75
    1048:	81 83       	std	Z+1, r24	; 0x01
usbInit():
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:621
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    104a:	8a e5       	ldi	r24, 0x5A	; 90
    104c:	80 83       	st	Z, r24
C:\Users\mss\Documents\Arduino\libraries\HIDSerial/usbdrv.c:626
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
    104e:	08 95       	ret

00001050 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:123
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    1050:	fb 01       	movw	r30, r22
    1052:	01 90       	ld	r0, Z+
    1054:	00 20       	and	r0, r0
    1056:	e9 f7       	brne	.-6      	; 0x1052 <Print::write(char const*) [clone .part.2]+0x2>
    1058:	31 97       	sbiw	r30, 0x01	; 1
    105a:	af 01       	movw	r20, r30
    105c:	46 1b       	sub	r20, r22
    105e:	57 0b       	sbc	r21, r23
    1060:	dc 01       	movw	r26, r24
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	02 80       	ldd	r0, Z+2	; 0x02
    1068:	f3 81       	ldd	r31, Z+3	; 0x03
    106a:	e0 2d       	mov	r30, r0
    106c:	09 94       	ijmp

0000106e <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	8c 01       	movw	r16, r24
    107c:	7b 01       	movw	r14, r22
    107e:	d0 e0       	ldi	r29, 0x00	; 0
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	f7 01       	movw	r30, r14
    1084:	ec 0f       	add	r30, r28
    1086:	fd 1f       	adc	r31, r29
    1088:	64 91       	lpm	r22, Z
    108a:	66 23       	and	r22, r22
    108c:	61 f0       	breq	.+24     	; 0x10a6 <Print::print(__FlashStringHelper const*)+0x38>
    108e:	d8 01       	movw	r26, r16
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	01 90       	ld	r0, Z+
    1096:	f0 81       	ld	r31, Z
    1098:	e0 2d       	mov	r30, r0
    109a:	c8 01       	movw	r24, r16
    109c:	09 95       	icall
    109e:	89 2b       	or	r24, r25
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <Print::print(__FlashStringHelper const*)+0x38>
    10a2:	21 96       	adiw	r28, 0x01	; 1
    10a4:	ee cf       	rjmp	.-36     	; 0x1082 <Print::print(__FlashStringHelper const*)+0x14>
    10a6:	ce 01       	movw	r24, r28
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    10b6:	db 01       	movw	r26, r22
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	4d 91       	ld	r20, X+
    10bc:	5c 91       	ld	r21, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	6d 91       	ld	r22, X+
    10c2:	7c 91       	ld	r23, X
    10c4:	dc 01       	movw	r26, r24
    10c6:	ed 91       	ld	r30, X+
    10c8:	fc 91       	ld	r31, X
    10ca:	02 80       	ldd	r0, Z+2	; 0x02
    10cc:	f3 81       	ldd	r31, Z+3	; 0x03
    10ce:	e0 2d       	mov	r30, r0
    10d0:	09 94       	ijmp

000010d2 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    10d2:	61 15       	cp	r22, r1
    10d4:	71 05       	cpc	r23, r1
    10d6:	11 f0       	breq	.+4      	; 0x10dc <Print::print(char const*)+0xa>
    10d8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	08 95       	ret

000010e2 <Print::println()>:
_ZN5Print5writeEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:127
}

size_t Print::println(void)
{
    10e2:	66 ea       	ldi	r22, 0xA6	; 166
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0c 94 28 08 	jmp	0x1050	; 0x1050 <Print::write(char const*) [clone .part.2]>

000010ea <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:115
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:116
  size_t n = print(ifsh);
    10f4:	0e 94 37 08 	call	0x106e	; 0x106e <Print::print(__FlashStringHelper const*)>
    10f8:	8c 01       	movw	r16, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:117
  n += println();
    10fa:	ce 01       	movw	r24, r28
    10fc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Print::println()>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:119
  return n;
}
    1100:	80 0f       	add	r24, r16
    1102:	91 1f       	adc	r25, r17
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	ec 01       	movw	r28, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    1118:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <Print::print(String const&)>
    111c:	8c 01       	movw	r16, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:134
  n += println();
    111e:	ce 01       	movw	r24, r28
    1120:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Print::println()>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:136
  return n;
}
    1124:	80 0f       	add	r24, r16
    1126:	91 1f       	adc	r25, r17
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    113c:	d0 e0       	ldi	r29, 0x00	; 0
    113e:	c0 e0       	ldi	r28, 0x00	; 0
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	19 f0       	breq	.+6      	; 0x114c <Print::println(char const*)+0x1a>
    1146:	0e 94 28 08 	call	0x1050	; 0x1050 <Print::write(char const*) [clone .part.2]>
    114a:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    114c:	c8 01       	movw	r24, r16
    114e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Print::println()>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:143
  return n;
}
    1152:	8c 0f       	add	r24, r28
    1154:	9d 1f       	adc	r25, r29
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <String::StringIfHelper() const>:
_ZNK6String14StringIfHelperEv():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:447 (discriminator 6)
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
}
    1160:	08 95       	ret

00001162 <String::~String()>:
_ZN6StringD2Ev():
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <free>

0000116c <String::invalidate()>:
_ZN6String10invalidateEv():
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	88 81       	ld	r24, Y
    1174:	99 81       	ldd	r25, Y+1	; 0x01
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	11 f0       	breq	.+4      	; 0x117e <String::invalidate()+0x12>
    117a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <free>
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	18 82       	st	Y, r1
    1182:	1d 82       	std	Y+5, r1	; 0x05
    1184:	1c 82       	std	Y+4, r1	; 0x04
    1186:	1b 82       	std	Y+3, r1	; 0x03
    1188:	1a 82       	std	Y+2, r1	; 0x02
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
    119a:	8b 01       	movw	r16, r22
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <realloc>
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	51 f0       	breq	.+20     	; 0x11c0 <String::changeBuffer(unsigned int)+0x30>
    11ac:	99 83       	std	Y+1, r25	; 0x01
    11ae:	88 83       	st	Y, r24
    11b0:	1b 83       	std	Y+3, r17	; 0x03
    11b2:	0a 83       	std	Y+2, r16	; 0x02
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	f9 cf       	rjmp	.-14     	; 0x11b6 <String::changeBuffer(unsigned int)+0x26>

000011c4 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	89 2b       	or	r24, r25
    11d0:	49 f0       	breq	.+18     	; 0x11e4 <String::reserve(unsigned int)+0x20>
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	86 17       	cp	r24, r22
    11d8:	97 07       	cpc	r25, r23
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <String::reserve(unsigned int)+0x20>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret
    11e4:	ce 01       	movw	r24, r28
    11e6:	0e 94 c8 08 	call	0x1190	; 0x1190 <String::changeBuffer(unsigned int)>
    11ea:	88 23       	and	r24, r24
    11ec:	c1 f3       	breq	.-16     	; 0x11de <String::reserve(unsigned int)+0x1a>
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	9d 81       	ldd	r25, Y+5	; 0x05
    11f2:	89 2b       	or	r24, r25
    11f4:	99 f7       	brne	.-26     	; 0x11dc <String::reserve(unsigned int)+0x18>
    11f6:	e8 81       	ld	r30, Y
    11f8:	f9 81       	ldd	r31, Y+1	; 0x01
    11fa:	10 82       	st	Z, r1
    11fc:	ef cf       	rjmp	.-34     	; 0x11dc <String::reserve(unsigned int)+0x18>

000011fe <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
    120c:	7b 01       	movw	r14, r22
    120e:	8a 01       	movw	r16, r20
    1210:	ba 01       	movw	r22, r20
    1212:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <String::reserve(unsigned int)>
    1216:	81 11       	cpse	r24, r1
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <String::copy(char const*, unsigned int)+0x32>
    121a:	ce 01       	movw	r24, r28
    121c:	0e 94 b6 08 	call	0x116c	; 0x116c <String::invalidate()>
    1220:	ce 01       	movw	r24, r28
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	08 95       	ret
    1230:	1d 83       	std	Y+5, r17	; 0x05
    1232:	0c 83       	std	Y+4, r16	; 0x04
    1234:	b7 01       	movw	r22, r14
    1236:	88 81       	ld	r24, Y
    1238:	99 81       	ldd	r25, Y+1	; 0x01
    123a:	0e 94 3e 10 	call	0x207c	; 0x207c <strcpy>
    123e:	f0 cf       	rjmp	.-32     	; 0x1220 <String::copy(char const*, unsigned int)+0x22>

00001240 <String::String(char const*)>:
_ZN6String4initEv():
    1240:	fc 01       	movw	r30, r24
    1242:	11 82       	std	Z+1, r1	; 0x01
    1244:	10 82       	st	Z, r1
    1246:	13 82       	std	Z+3, r1	; 0x03
    1248:	12 82       	std	Z+2, r1	; 0x02
    124a:	15 82       	std	Z+5, r1	; 0x05
    124c:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    124e:	61 15       	cp	r22, r1
    1250:	71 05       	cpc	r23, r1
    1252:	51 f0       	breq	.+20     	; 0x1268 <String::String(char const*)+0x28>
    1254:	fb 01       	movw	r30, r22
    1256:	01 90       	ld	r0, Z+
    1258:	00 20       	and	r0, r0
    125a:	e9 f7       	brne	.-6      	; 0x1256 <String::String(char const*)+0x16>
    125c:	31 97       	sbiw	r30, 0x01	; 1
    125e:	af 01       	movw	r20, r30
    1260:	46 1b       	sub	r20, r22
    1262:	57 0b       	sbc	r21, r23
    1264:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <String::copy(char const*, unsigned int)>
    1268:	08 95       	ret

0000126a <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    126a:	fb 01       	movw	r30, r22
    126c:	01 90       	ld	r0, Z+
    126e:	00 20       	and	r0, r0
    1270:	e9 f7       	brne	.-6      	; 0x126c <String::operator=(char const*) [clone .part.3]+0x2>
    1272:	31 97       	sbiw	r30, 0x01	; 1
    1274:	af 01       	movw	r20, r30
    1276:	46 1b       	sub	r20, r22
    1278:	57 0b       	sbc	r21, r23
    127a:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <String::copy(char const*, unsigned int)>

0000127e <String::String(char)>:
_ZN6StringC2Ec():
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	00 d0       	rcall	.+0      	; 0x1284 <String::String(char)+0x6>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
_ZN6String4initEv():
    1288:	fc 01       	movw	r30, r24
    128a:	11 82       	std	Z+1, r1	; 0x01
    128c:	10 82       	st	Z, r1
    128e:	13 82       	std	Z+3, r1	; 0x03
    1290:	12 82       	std	Z+2, r1	; 0x02
    1292:	15 82       	std	Z+5, r1	; 0x05
    1294:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ec():
    1296:	69 83       	std	Y+1, r22	; 0x01
    1298:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc():
    129a:	be 01       	movw	r22, r28
    129c:	6f 5f       	subi	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	0e 94 35 09 	call	0x126a	; 0x126a <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ec():
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <String::move(String&)>:
_ZN6String4moveERS_():
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	8c 01       	movw	r16, r24
    12b8:	eb 01       	movw	r28, r22
    12ba:	fc 01       	movw	r30, r24
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	01 f1       	breq	.+64     	; 0x1304 <String::move(String&)+0x56>
    12c4:	68 81       	ld	r22, Y
    12c6:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv():
    12c8:	61 15       	cp	r22, r1
    12ca:	71 05       	cpc	r23, r1
    12cc:	c9 f0       	breq	.+50     	; 0x1300 <String::move(String&)+0x52>
_ZN6String4moveERS_():
    12ce:	20 eb       	ldi	r18, 0xB0	; 176
    12d0:	38 e0       	ldi	r19, 0x08	; 8
    12d2:	23 2b       	or	r18, r19
    12d4:	a9 f0       	breq	.+42     	; 0x1300 <String::move(String&)+0x52>
    12d6:	42 81       	ldd	r20, Z+2	; 0x02
    12d8:	53 81       	ldd	r21, Z+3	; 0x03
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	42 17       	cp	r20, r18
    12e0:	53 07       	cpc	r21, r19
    12e2:	70 f0       	brcs	.+28     	; 0x1300 <String::move(String&)+0x52>
    12e4:	0e 94 3e 10 	call	0x207c	; 0x207c <strcpy>
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	f8 01       	movw	r30, r16
    12ee:	95 83       	std	Z+5, r25	; 0x05
    12f0:	84 83       	std	Z+4, r24	; 0x04
    12f2:	1d 82       	std	Y+5, r1	; 0x05
    12f4:	1c 82       	std	Y+4, r1	; 0x04
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret
    1300:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <free>
    1304:	88 81       	ld	r24, Y
    1306:	99 81       	ldd	r25, Y+1	; 0x01
    1308:	f8 01       	movw	r30, r16
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	9b 81       	ldd	r25, Y+3	; 0x03
    1312:	93 83       	std	Z+3, r25	; 0x03
    1314:	82 83       	std	Z+2, r24	; 0x02
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	95 83       	std	Z+5, r25	; 0x05
    131c:	84 83       	std	Z+4, r24	; 0x04
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	18 82       	st	Y, r1
    1322:	1b 82       	std	Y+3, r1	; 0x03
    1324:	1a 82       	std	Y+2, r1	; 0x02
    1326:	e5 cf       	rjmp	.-54     	; 0x12f2 <String::move(String&)+0x44>

00001328 <String::operator=(StringSumHelper&&)>:
_ZN6StringaSEO15StringSumHelper():
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	68 17       	cp	r22, r24
    1330:	79 07       	cpc	r23, r25
    1332:	11 f0       	breq	.+4      	; 0x1338 <String::operator=(StringSumHelper&&)+0x10>
    1334:	0e 94 57 09 	call	0x12ae	; 0x12ae <String::move(String&)>
    1338:	ce 01       	movw	r24, r28
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	61 15       	cp	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	41 f4       	brne	.+16     	; 0x1362 <String::concat(char const*, unsigned int)+0x22>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	08 95       	ret
    1362:	41 15       	cp	r20, r1
    1364:	51 05       	cpc	r21, r1
    1366:	b1 f0       	breq	.+44     	; 0x1394 <String::concat(char const*, unsigned int)+0x54>
    1368:	7b 01       	movw	r14, r22
    136a:	ec 01       	movw	r28, r24
    136c:	0c 81       	ldd	r16, Y+4	; 0x04
    136e:	1d 81       	ldd	r17, Y+5	; 0x05
    1370:	04 0f       	add	r16, r20
    1372:	15 1f       	adc	r17, r21
    1374:	b8 01       	movw	r22, r16
    1376:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <String::reserve(unsigned int)>
    137a:	88 23       	and	r24, r24
    137c:	51 f3       	breq	.-44     	; 0x1352 <String::concat(char const*, unsigned int)+0x12>
    137e:	28 81       	ld	r18, Y
    1380:	39 81       	ldd	r19, Y+1	; 0x01
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	b7 01       	movw	r22, r14
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	0e 94 3e 10 	call	0x207c	; 0x207c <strcpy>
    1390:	1d 83       	std	Y+5, r17	; 0x05
    1392:	0c 83       	std	Y+4, r16	; 0x04
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	de cf       	rjmp	.-68     	; 0x1354 <String::concat(char const*, unsigned int)+0x14>

00001398 <String::concat(String const&)>:
_ZN6String6concatERKS_():
    1398:	fb 01       	movw	r30, r22
    139a:	44 81       	ldd	r20, Z+4	; 0x04
    139c:	55 81       	ldd	r21, Z+5	; 0x05
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <String::concat(char const*, unsigned int)>

000013a6 <String::equals(char const*) const>:
_ZNK6String6equalsEPKc():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:451

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
    13a6:	fc 01       	movw	r30, r24
    13a8:	24 81       	ldd	r18, Z+4	; 0x04
    13aa:	35 81       	ldd	r19, Z+5	; 0x05
    13ac:	23 2b       	or	r18, r19
    13ae:	31 f4       	brne	.+12     	; 0x13bc <String::equals(char const*) const+0x16>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:451 (discriminator 1)
    13b0:	21 e0       	ldi	r18, 0x01	; 1
    13b2:	fb 01       	movw	r30, r22
    13b4:	67 2b       	or	r22, r23
    13b6:	49 f4       	brne	.+18     	; 0x13ca <String::equals(char const*) const+0x24>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:454
  if (cstr == NULL) return buffer[0] == 0;
  return strcmp(buffer, cstr) == 0;
}
    13b8:	82 2f       	mov	r24, r18
    13ba:	08 95       	ret
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:452
}

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
  if (cstr == NULL) return buffer[0] == 0;
    13c0:	61 15       	cp	r22, r1
    13c2:	71 05       	cpc	r23, r1
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <String::equals(char const*) const+0x2e>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:452 (discriminator 1)
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	88 23       	and	r24, r24
    13ce:	a1 f3       	breq	.-24     	; 0x13b8 <String::equals(char const*) const+0x12>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:453
  return strcmp(buffer, cstr) == 0;
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	f2 cf       	rjmp	.-28     	; 0x13b8 <String::equals(char const*) const+0x12>
    13d4:	0e 94 35 10 	call	0x206a	; 0x206a <strcmp>
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	89 2b       	or	r24, r25
    13dc:	69 f3       	breq	.-38     	; 0x13b8 <String::equals(char const*) const+0x12>
    13de:	f8 cf       	rjmp	.-16     	; 0x13d0 <String::equals(char const*) const+0x2a>

000013e0 <initVariant>:
initVariant():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    13e0:	08 95       	ret

000013e2 <main>:
main():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    13e2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <init>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    13e6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <initVariant>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    13ea:	0e 94 90 02 	call	0x520	; 0x520 <setup>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    13f2:	0e 94 b9 02 	call	0x572	; 0x572 <loop>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    13f6:	20 97       	sbiw	r28, 0x00	; 0
    13f8:	e1 f3       	breq	.-8      	; 0x13f2 <main+0x10>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    13fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    13fe:	f9 cf       	rjmp	.-14     	; 0x13f2 <main+0x10>

00001400 <__vector_11>:
__vector_11():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer0_millis>
    141a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer0_millis+0x1>
    141e:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <timer0_millis+0x2>
    1422:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <timer0_millis+0x3>
    1426:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <timer0_fract>
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	23 0f       	add	r18, r19
    142e:	2d 37       	cpi	r18, 0x7D	; 125
    1430:	68 f1       	brcs	.+90     	; 0x148c <__vector_11+0x8c>
    1432:	26 e8       	ldi	r18, 0x86	; 134
    1434:	23 0f       	add	r18, r19
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	a1 1d       	adc	r26, r1
    143a:	b1 1d       	adc	r27, r1
    143c:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <timer0_fract>
    1440:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <timer0_millis>
    1444:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <timer0_millis+0x1>
    1448:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <timer0_millis+0x2>
    144c:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <timer0_millis+0x3>
    1450:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <timer0_overflow_count>
    1454:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x1>
    1458:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <timer0_overflow_count+0x2>
    145c:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <timer0_overflow_count+0x3>
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <timer0_overflow_count>
    146a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <timer0_overflow_count+0x1>
    146e:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <timer0_overflow_count+0x2>
    1472:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <timer0_overflow_count+0x3>
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	a1 1d       	adc	r26, r1
    1490:	b1 1d       	adc	r27, r1
    1492:	d4 cf       	rjmp	.-88     	; 0x143c <__vector_11+0x3c>

00001494 <millis>:
millis():
    1494:	2f b7       	in	r18, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <timer0_millis>
    149c:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <timer0_millis+0x1>
    14a0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_millis+0x2>
    14a4:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_millis+0x3>
    14a8:	2f bf       	out	0x3f, r18	; 63
    14aa:	08 95       	ret

000014ac <init>:
init():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    14ac:	78 94       	sei
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    14ae:	83 b7       	in	r24, 0x33	; 51
    14b0:	83 60       	ori	r24, 0x03	; 3
    14b2:	83 bf       	out	0x33, r24	; 51
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
    14b4:	83 b7       	in	r24, 0x33	; 51
    14b6:	88 64       	ori	r24, 0x48	; 72
    14b8:	83 bf       	out	0x33, r24	; 51
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    14ba:	89 b7       	in	r24, 0x39	; 57
    14bc:	81 60       	ori	r24, 0x01	; 1
    14be:	89 bf       	out	0x39, r24	; 57
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	8e bd       	out	0x2e, r24	; 46
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    14c4:	8e b5       	in	r24, 0x2e	; 46
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	8e bd       	out	0x2e, r24	; 46
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    14ca:	8f b5       	in	r24, 0x2f	; 47
    14cc:	81 60       	ori	r24, 0x01	; 1
    14ce:	8f bd       	out	0x2f, r24	; 47
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    14d0:	85 b5       	in	r24, 0x25	; 37
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	85 bd       	out	0x25, r24	; 37
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    14d6:	85 b5       	in	r24, 0x25	; 37
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	85 bd       	out	0x25, r24	; 37
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    14dc:	87 e8       	ldi	r24, 0x87	; 135
    14de:	86 b9       	out	0x06, r24	; 6
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    14e0:	1a b8       	out	0x0a, r1	; 10
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#elif defined(UCSR0B)
  UCSR0B = 0;
#endif
}
    14e2:	08 95       	ret

000014e4 <turnOffPWM>:
turnOffPWM():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	59 f0       	breq	.+22     	; 0x14fe <turnOffPWM+0x1a>
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <turnOffPWM+0x10>
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	99 f0       	breq	.+38     	; 0x1514 <turnOffPWM+0x30>
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	89 f0       	breq	.+34     	; 0x1514 <turnOffPWM+0x30>
    14f2:	08 95       	ret
    14f4:	85 30       	cpi	r24, 0x05	; 5
    14f6:	39 f0       	breq	.+14     	; 0x1506 <turnOffPWM+0x22>
    14f8:	87 30       	cpi	r24, 0x07	; 7
    14fa:	41 f0       	breq	.+16     	; 0x150c <turnOffPWM+0x28>
    14fc:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    14fe:	8f b5       	in	r24, 0x2f	; 47
    1500:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1502:	8f bd       	out	0x2f, r24	; 47
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1504:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1506:	8f b5       	in	r24, 0x2f	; 47
    1508:	8f 7d       	andi	r24, 0xDF	; 223
    150a:	fb cf       	rjmp	.-10     	; 0x1502 <turnOffPWM+0x1e>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    150c:	85 b5       	in	r24, 0x25	; 37
    150e:	8f 7d       	andi	r24, 0xDF	; 223
    1510:	85 bd       	out	0x25, r24	; 37
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
    1512:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    1514:	83 b7       	in	r24, 0x33	; 51
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	83 bf       	out	0x33, r24	; 51
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    151a:	08 95       	ret

0000151c <pinMode>:
pinMode():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	ef 5d       	subi	r30, 0xDF	; 223
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	24 91       	lpm	r18, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    152a:	8f 5b       	subi	r24, 0xBF	; 191
    152c:	9e 4f       	sbci	r25, 0xFE	; 254
    152e:	fc 01       	movw	r30, r24
    1530:	84 91       	lpm	r24, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1532:	88 23       	and	r24, r24
    1534:	c9 f0       	breq	.+50     	; 0x1568 <pinMode+0x4c>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	fc 01       	movw	r30, r24
    153e:	eb 58       	subi	r30, 0x8B	; 139
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	a5 91       	lpm	r26, Z+
    1544:	b4 91       	lpm	r27, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1546:	fc 01       	movw	r30, r24
    1548:	e5 59       	subi	r30, 0x95	; 149
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	c5 91       	lpm	r28, Z+
    154e:	d4 91       	lpm	r29, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1550:	61 11       	cpse	r22, r1
    1552:	0d c0       	rjmp	.+26     	; 0x156e <pinMode+0x52>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1554:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1556:	f8 94       	cli
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1558:	8c 91       	ld	r24, X
    155a:	20 95       	com	r18
    155c:	82 23       	and	r24, r18
    155e:	8c 93       	st	X, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1560:	88 81       	ld	r24, Y
    1562:	28 23       	and	r18, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1564:	28 83       	st	Y, r18
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1566:	9f bf       	out	0x3f, r25	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    156e:	62 30       	cpi	r22, 0x02	; 2
    1570:	51 f4       	brne	.+20     	; 0x1586 <pinMode+0x6a>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1572:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1574:	f8 94       	cli
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1576:	3c 91       	ld	r19, X
    1578:	82 2f       	mov	r24, r18
    157a:	80 95       	com	r24
    157c:	83 23       	and	r24, r19
    157e:	8c 93       	st	X, r24
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1580:	e8 81       	ld	r30, Y
    1582:	2e 2b       	or	r18, r30
    1584:	ef cf       	rjmp	.-34     	; 0x1564 <pinMode+0x48>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1586:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1588:	f8 94       	cli
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    158a:	ec 91       	ld	r30, X
    158c:	2e 2b       	or	r18, r30
    158e:	2c 93       	st	X, r18
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1590:	8f bf       	out	0x3f, r24	; 63
    1592:	ea cf       	rjmp	.-44     	; 0x1568 <pinMode+0x4c>

00001594 <digitalWrite>:
digitalWrite():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	f9 01       	movw	r30, r18
    15a0:	ef 5f       	subi	r30, 0xFF	; 255
    15a2:	fe 4f       	sbci	r31, 0xFE	; 254
    15a4:	84 91       	lpm	r24, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    15a6:	f9 01       	movw	r30, r18
    15a8:	ef 5d       	subi	r30, 0xDF	; 223
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	d4 91       	lpm	r29, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    15ae:	f9 01       	movw	r30, r18
    15b0:	ef 5b       	subi	r30, 0xBF	; 191
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	c4 91       	lpm	r28, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    15b6:	cc 23       	and	r28, r28
    15b8:	a9 f0       	breq	.+42     	; 0x15e4 <digitalWrite+0x50>
    15ba:	16 2f       	mov	r17, r22
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15bc:	81 11       	cpse	r24, r1
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    15be:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <turnOffPWM>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    15c2:	ec 2f       	mov	r30, r28
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	e5 59       	subi	r30, 0x95	; 149
    15cc:	fe 4f       	sbci	r31, 0xFE	; 254
    15ce:	a5 91       	lpm	r26, Z+
    15d0:	b4 91       	lpm	r27, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    15d2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    15d4:	f8 94       	cli
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    15d6:	ec 91       	ld	r30, X
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    15d8:	11 11       	cpse	r17, r1
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <digitalWrite+0x58>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    15dc:	d0 95       	com	r29
    15de:	de 23       	and	r29, r30
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    15e0:	dc 93       	st	X, r29
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    15e2:	8f bf       	out	0x3f, r24	; 63
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    15ec:	de 2b       	or	r29, r30
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <digitalWrite+0x4c>

000015f0 <digitalRead>:
digitalRead():
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	ef 5f       	subi	r30, 0xFF	; 255
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	84 91       	lpm	r24, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1600:	f9 01       	movw	r30, r18
    1602:	ef 5d       	subi	r30, 0xDF	; 223
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	d4 91       	lpm	r29, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1608:	f9 01       	movw	r30, r18
    160a:	ef 5b       	subi	r30, 0xBF	; 191
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	c4 91       	lpm	r28, Z
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1610:	cc 23       	and	r28, r28
    1612:	a1 f0       	breq	.+40     	; 0x163c <digitalRead+0x4c>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1614:	81 11       	cpse	r24, r1
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1616:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <turnOffPWM>
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    161a:	ec 2f       	mov	r30, r28
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	ef 59       	subi	r30, 0x9F	; 159
    1624:	fe 4f       	sbci	r31, 0xFE	; 254
    1626:	a5 91       	lpm	r26, Z+
    1628:	b4 91       	lpm	r27, Z
    162a:	ec 91       	ld	r30, X
    162c:	ed 23       	and	r30, r29
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	09 f4       	brne	.+2      	; 0x1636 <digitalRead+0x46>
    1634:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret
C:\Users\mss\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	fa cf       	rjmp	.-12     	; 0x1636 <digitalRead+0x46>

00001642 <__subsf3>:
__subsf3():
    1642:	50 58       	subi	r21, 0x80	; 128

00001644 <__addsf3>:
    1644:	bb 27       	eor	r27, r27
    1646:	aa 27       	eor	r26, r26
    1648:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3x>
    164c:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__fp_round>
__addsf3():
    1650:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1654:	38 f0       	brcs	.+14     	; 0x1664 <__addsf3+0x20>
    1656:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    165a:	20 f0       	brcs	.+8      	; 0x1664 <__addsf3+0x20>
    165c:	39 f4       	brne	.+14     	; 0x166c <__addsf3+0x28>
    165e:	9f 3f       	cpi	r25, 0xFF	; 255
    1660:	19 f4       	brne	.+6      	; 0x1668 <__addsf3+0x24>
    1662:	26 f4       	brtc	.+8      	; 0x166c <__addsf3+0x28>
    1664:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1668:	0e f4       	brtc	.+2      	; 0x166c <__addsf3+0x28>
    166a:	e0 95       	com	r30
    166c:	e7 fb       	bst	r30, 7
    166e:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>

00001672 <__addsf3x>:
__addsf3x():
    1672:	e9 2f       	mov	r30, r25
    1674:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1678:	58 f3       	brcs	.-42     	; 0x1650 <__addsf3+0xc>
    167a:	ba 17       	cp	r27, r26
    167c:	62 07       	cpc	r22, r18
    167e:	73 07       	cpc	r23, r19
    1680:	84 07       	cpc	r24, r20
    1682:	95 07       	cpc	r25, r21
    1684:	20 f0       	brcs	.+8      	; 0x168e <__addsf3x+0x1c>
    1686:	79 f4       	brne	.+30     	; 0x16a6 <__addsf3x+0x34>
    1688:	a6 f5       	brtc	.+104    	; 0x16f2 <__addsf3x+0x80>
    168a:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    168e:	0e f4       	brtc	.+2      	; 0x1692 <__addsf3x+0x20>
    1690:	e0 95       	com	r30
    1692:	0b 2e       	mov	r0, r27
    1694:	ba 2f       	mov	r27, r26
    1696:	a0 2d       	mov	r26, r0
    1698:	0b 01       	movw	r0, r22
    169a:	b9 01       	movw	r22, r18
    169c:	90 01       	movw	r18, r0
    169e:	0c 01       	movw	r0, r24
    16a0:	ca 01       	movw	r24, r20
    16a2:	a0 01       	movw	r20, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	ff 27       	eor	r31, r31
    16a8:	59 1b       	sub	r21, r25
    16aa:	99 f0       	breq	.+38     	; 0x16d2 <__addsf3x+0x60>
    16ac:	59 3f       	cpi	r21, 0xF9	; 249
    16ae:	50 f4       	brcc	.+20     	; 0x16c4 <__addsf3x+0x52>
    16b0:	50 3e       	cpi	r21, 0xE0	; 224
    16b2:	68 f1       	brcs	.+90     	; 0x170e <__addsf3x+0x9c>
    16b4:	1a 16       	cp	r1, r26
    16b6:	f0 40       	sbci	r31, 0x00	; 0
    16b8:	a2 2f       	mov	r26, r18
    16ba:	23 2f       	mov	r18, r19
    16bc:	34 2f       	mov	r19, r20
    16be:	44 27       	eor	r20, r20
    16c0:	58 5f       	subi	r21, 0xF8	; 248
    16c2:	f3 cf       	rjmp	.-26     	; 0x16aa <__addsf3x+0x38>
    16c4:	46 95       	lsr	r20
    16c6:	37 95       	ror	r19
    16c8:	27 95       	ror	r18
    16ca:	a7 95       	ror	r26
    16cc:	f0 40       	sbci	r31, 0x00	; 0
    16ce:	53 95       	inc	r21
    16d0:	c9 f7       	brne	.-14     	; 0x16c4 <__addsf3x+0x52>
    16d2:	7e f4       	brtc	.+30     	; 0x16f2 <__addsf3x+0x80>
    16d4:	1f 16       	cp	r1, r31
    16d6:	ba 0b       	sbc	r27, r26
    16d8:	62 0b       	sbc	r22, r18
    16da:	73 0b       	sbc	r23, r19
    16dc:	84 0b       	sbc	r24, r20
    16de:	ba f0       	brmi	.+46     	; 0x170e <__addsf3x+0x9c>
    16e0:	91 50       	subi	r25, 0x01	; 1
    16e2:	a1 f0       	breq	.+40     	; 0x170c <__addsf3x+0x9a>
    16e4:	ff 0f       	add	r31, r31
    16e6:	bb 1f       	adc	r27, r27
    16e8:	66 1f       	adc	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	c2 f7       	brpl	.-16     	; 0x16e0 <__addsf3x+0x6e>
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <__addsf3x+0x9c>
    16f2:	ba 0f       	add	r27, r26
    16f4:	62 1f       	adc	r22, r18
    16f6:	73 1f       	adc	r23, r19
    16f8:	84 1f       	adc	r24, r20
    16fa:	48 f4       	brcc	.+18     	; 0x170e <__addsf3x+0x9c>
    16fc:	87 95       	ror	r24
    16fe:	77 95       	ror	r23
    1700:	67 95       	ror	r22
    1702:	b7 95       	ror	r27
    1704:	f7 95       	ror	r31
    1706:	9e 3f       	cpi	r25, 0xFE	; 254
    1708:	08 f0       	brcs	.+2      	; 0x170c <__addsf3x+0x9a>
    170a:	b0 cf       	rjmp	.-160    	; 0x166c <__addsf3+0x28>
    170c:	93 95       	inc	r25
    170e:	88 0f       	add	r24, r24
    1710:	08 f0       	brcs	.+2      	; 0x1714 <__addsf3x+0xa2>
    1712:	99 27       	eor	r25, r25
    1714:	ee 0f       	add	r30, r30
    1716:	97 95       	ror	r25
    1718:	87 95       	ror	r24
    171a:	08 95       	ret

0000171c <__cmpsf2>:
    171c:	0e 94 47 0c 	call	0x188e	; 0x188e <__fp_cmp>
    1720:	08 f4       	brcc	.+2      	; 0x1724 <__cmpsf2+0x8>
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	08 95       	ret

00001726 <cos>:
    1726:	0e 94 84 0c 	call	0x1908	; 0x1908 <__fp_rempio2>
    172a:	e3 95       	inc	r30
    172c:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__fp_sinus>

00001730 <__divsf3>:
    1730:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divsf3x>
    1734:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__fp_round>
    1738:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    173c:	58 f0       	brcs	.+22     	; 0x1754 <__divsf3+0x24>
__divsf3():
    173e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1742:	40 f0       	brcs	.+16     	; 0x1754 <__divsf3+0x24>
    1744:	29 f4       	brne	.+10     	; 0x1750 <__divsf3+0x20>
    1746:	5f 3f       	cpi	r21, 0xFF	; 255
    1748:	29 f0       	breq	.+10     	; 0x1754 <__divsf3+0x24>
    174a:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    174e:	51 11       	cpse	r21, r1
    1750:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1754:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>

00001758 <__divsf3x>:
__divsf3x():
    1758:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    175c:	68 f3       	brcs	.-38     	; 0x1738 <__divsf3+0x8>

0000175e <__divsf3_pse>:
    175e:	99 23       	and	r25, r25
    1760:	b1 f3       	breq	.-20     	; 0x174e <__divsf3+0x1e>
    1762:	55 23       	and	r21, r21
    1764:	91 f3       	breq	.-28     	; 0x174a <__divsf3+0x1a>
    1766:	95 1b       	sub	r25, r21
    1768:	55 0b       	sbc	r21, r21
    176a:	bb 27       	eor	r27, r27
    176c:	aa 27       	eor	r26, r26
    176e:	62 17       	cp	r22, r18
    1770:	73 07       	cpc	r23, r19
    1772:	84 07       	cpc	r24, r20
    1774:	38 f0       	brcs	.+14     	; 0x1784 <__divsf3_pse+0x26>
    1776:	9f 5f       	subi	r25, 0xFF	; 255
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	44 1f       	adc	r20, r20
    1780:	aa 1f       	adc	r26, r26
    1782:	a9 f3       	breq	.-22     	; 0x176e <__divsf3_pse+0x10>
    1784:	35 d0       	rcall	.+106    	; 0x17f0 <__divsf3_pse+0x92>
    1786:	0e 2e       	mov	r0, r30
    1788:	3a f0       	brmi	.+14     	; 0x1798 <__divsf3_pse+0x3a>
    178a:	e0 e8       	ldi	r30, 0x80	; 128
    178c:	32 d0       	rcall	.+100    	; 0x17f2 <__divsf3_pse+0x94>
    178e:	91 50       	subi	r25, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	e6 95       	lsr	r30
    1794:	00 1c       	adc	r0, r0
    1796:	ca f7       	brpl	.-14     	; 0x178a <__divsf3_pse+0x2c>
    1798:	2b d0       	rcall	.+86     	; 0x17f0 <__divsf3_pse+0x92>
    179a:	fe 2f       	mov	r31, r30
    179c:	29 d0       	rcall	.+82     	; 0x17f0 <__divsf3_pse+0x92>
    179e:	66 0f       	add	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	88 1f       	adc	r24, r24
    17a4:	bb 1f       	adc	r27, r27
    17a6:	26 17       	cp	r18, r22
    17a8:	37 07       	cpc	r19, r23
    17aa:	48 07       	cpc	r20, r24
    17ac:	ab 07       	cpc	r26, r27
    17ae:	b0 e8       	ldi	r27, 0x80	; 128
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <__divsf3_pse+0x56>
    17b2:	bb 0b       	sbc	r27, r27
    17b4:	80 2d       	mov	r24, r0
    17b6:	bf 01       	movw	r22, r30
    17b8:	ff 27       	eor	r31, r31
    17ba:	93 58       	subi	r25, 0x83	; 131
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	3a f0       	brmi	.+14     	; 0x17ce <__divsf3_pse+0x70>
    17c0:	9e 3f       	cpi	r25, 0xFE	; 254
    17c2:	51 05       	cpc	r21, r1
    17c4:	78 f0       	brcs	.+30     	; 0x17e4 <__divsf3_pse+0x86>
    17c6:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    17ca:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    17ce:	5f 3f       	cpi	r21, 0xFF	; 255
    17d0:	e4 f3       	brlt	.-8      	; 0x17ca <__divsf3_pse+0x6c>
    17d2:	98 3e       	cpi	r25, 0xE8	; 232
    17d4:	d4 f3       	brlt	.-12     	; 0x17ca <__divsf3_pse+0x6c>
    17d6:	86 95       	lsr	r24
    17d8:	77 95       	ror	r23
    17da:	67 95       	ror	r22
    17dc:	b7 95       	ror	r27
    17de:	f7 95       	ror	r31
    17e0:	9f 5f       	subi	r25, 0xFF	; 255
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <__divsf3_pse+0x78>
    17e4:	88 0f       	add	r24, r24
    17e6:	91 1d       	adc	r25, r1
    17e8:	96 95       	lsr	r25
    17ea:	87 95       	ror	r24
    17ec:	97 f9       	bld	r25, 7
    17ee:	08 95       	ret
    17f0:	e1 e0       	ldi	r30, 0x01	; 1
    17f2:	66 0f       	add	r22, r22
    17f4:	77 1f       	adc	r23, r23
    17f6:	88 1f       	adc	r24, r24
    17f8:	bb 1f       	adc	r27, r27
    17fa:	62 17       	cp	r22, r18
    17fc:	73 07       	cpc	r23, r19
    17fe:	84 07       	cpc	r24, r20
    1800:	ba 07       	cpc	r27, r26
    1802:	20 f0       	brcs	.+8      	; 0x180c <__divsf3_pse+0xae>
    1804:	62 1b       	sub	r22, r18
    1806:	73 0b       	sbc	r23, r19
    1808:	84 0b       	sbc	r24, r20
    180a:	ba 0b       	sbc	r27, r26
    180c:	ee 1f       	adc	r30, r30
    180e:	88 f7       	brcc	.-30     	; 0x17f2 <__divsf3_pse+0x94>
    1810:	e0 95       	com	r30
    1812:	08 95       	ret

00001814 <__floatunsisf>:
    1814:	e8 94       	clt
    1816:	09 c0       	rjmp	.+18     	; 0x182a <__floatsisf+0x12>

00001818 <__floatsisf>:
    1818:	97 fb       	bst	r25, 7
    181a:	3e f4       	brtc	.+14     	; 0x182a <__floatsisf+0x12>
    181c:	90 95       	com	r25
    181e:	80 95       	com	r24
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	99 23       	and	r25, r25
    182c:	a9 f0       	breq	.+42     	; 0x1858 <__floatsisf+0x40>
    182e:	f9 2f       	mov	r31, r25
    1830:	96 e9       	ldi	r25, 0x96	; 150
    1832:	bb 27       	eor	r27, r27
__floatsisf():
    1834:	93 95       	inc	r25
    1836:	f6 95       	lsr	r31
    1838:	87 95       	ror	r24
    183a:	77 95       	ror	r23
    183c:	67 95       	ror	r22
    183e:	b7 95       	ror	r27
    1840:	f1 11       	cpse	r31, r1
    1842:	f8 cf       	rjmp	.-16     	; 0x1834 <__floatsisf+0x1c>
    1844:	fa f4       	brpl	.+62     	; 0x1884 <__floatsisf+0x6c>
    1846:	bb 0f       	add	r27, r27
    1848:	11 f4       	brne	.+4      	; 0x184e <__floatsisf+0x36>
    184a:	60 ff       	sbrs	r22, 0
    184c:	1b c0       	rjmp	.+54     	; 0x1884 <__floatsisf+0x6c>
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	8f 4f       	sbci	r24, 0xFF	; 255
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <__floatsisf+0x6c>
    1858:	88 23       	and	r24, r24
    185a:	11 f0       	breq	.+4      	; 0x1860 <__floatsisf+0x48>
    185c:	96 e9       	ldi	r25, 0x96	; 150
    185e:	11 c0       	rjmp	.+34     	; 0x1882 <__floatsisf+0x6a>
    1860:	77 23       	and	r23, r23
    1862:	21 f0       	breq	.+8      	; 0x186c <__floatsisf+0x54>
    1864:	9e e8       	ldi	r25, 0x8E	; 142
    1866:	87 2f       	mov	r24, r23
    1868:	76 2f       	mov	r23, r22
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__floatsisf+0x5e>
    186c:	66 23       	and	r22, r22
    186e:	71 f0       	breq	.+28     	; 0x188c <__floatsisf+0x74>
    1870:	96 e8       	ldi	r25, 0x86	; 134
    1872:	86 2f       	mov	r24, r22
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	2a f0       	brmi	.+10     	; 0x1884 <__floatsisf+0x6c>
    187a:	9a 95       	dec	r25
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	da f7       	brpl	.-10     	; 0x187a <__floatsisf+0x62>
    1884:	88 0f       	add	r24, r24
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret

0000188e <__fp_cmp>:
__fp_cmp():
    188e:	99 0f       	add	r25, r25
    1890:	00 08       	sbc	r0, r0
    1892:	55 0f       	add	r21, r21
    1894:	aa 0b       	sbc	r26, r26
    1896:	e0 e8       	ldi	r30, 0x80	; 128
    1898:	fe ef       	ldi	r31, 0xFE	; 254
    189a:	16 16       	cp	r1, r22
    189c:	17 06       	cpc	r1, r23
    189e:	e8 07       	cpc	r30, r24
    18a0:	f9 07       	cpc	r31, r25
    18a2:	c0 f0       	brcs	.+48     	; 0x18d4 <__fp_cmp+0x46>
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	e4 07       	cpc	r30, r20
    18aa:	f5 07       	cpc	r31, r21
    18ac:	98 f0       	brcs	.+38     	; 0x18d4 <__fp_cmp+0x46>
    18ae:	62 1b       	sub	r22, r18
    18b0:	73 0b       	sbc	r23, r19
    18b2:	84 0b       	sbc	r24, r20
    18b4:	95 0b       	sbc	r25, r21
    18b6:	39 f4       	brne	.+14     	; 0x18c6 <__fp_cmp+0x38>
    18b8:	0a 26       	eor	r0, r26
    18ba:	61 f0       	breq	.+24     	; 0x18d4 <__fp_cmp+0x46>
    18bc:	23 2b       	or	r18, r19
    18be:	24 2b       	or	r18, r20
    18c0:	25 2b       	or	r18, r21
    18c2:	21 f4       	brne	.+8      	; 0x18cc <__fp_cmp+0x3e>
    18c4:	08 95       	ret
    18c6:	0a 26       	eor	r0, r26
    18c8:	09 f4       	brne	.+2      	; 0x18cc <__fp_cmp+0x3e>
    18ca:	a1 40       	sbci	r26, 0x01	; 1
    18cc:	a6 95       	lsr	r26
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	81 1d       	adc	r24, r1
    18d2:	81 1d       	adc	r24, r1
    18d4:	08 95       	ret

000018d6 <__fp_inf>:
__fp_inf():
    18d6:	97 f9       	bld	r25, 7
    18d8:	9f 67       	ori	r25, 0x7F	; 127
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	08 95       	ret

000018e2 <__fp_nan>:
__fp_nan():
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	80 ec       	ldi	r24, 0xC0	; 192
    18e6:	08 95       	ret

000018e8 <__fp_pscA>:
__fp_pscA():
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	16 16       	cp	r1, r22
    18ee:	17 06       	cpc	r1, r23
    18f0:	18 06       	cpc	r1, r24
    18f2:	09 06       	cpc	r0, r25
    18f4:	08 95       	ret

000018f6 <__fp_pscB>:
__fp_pscB():
    18f6:	00 24       	eor	r0, r0
    18f8:	0a 94       	dec	r0
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	14 06       	cpc	r1, r20
    1900:	05 06       	cpc	r0, r21
    1902:	08 95       	ret
    1904:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>

00001908 <__fp_rempio2>:
__fp_rempio2():
    1908:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fp_splitA>
    190c:	d8 f3       	brcs	.-10     	; 0x1904 <__fp_pscB+0xe>
    190e:	e8 94       	clt
    1910:	e0 e0       	ldi	r30, 0x00	; 0
    1912:	bb 27       	eor	r27, r27
    1914:	9f 57       	subi	r25, 0x7F	; 127
    1916:	f0 f0       	brcs	.+60     	; 0x1954 <__fp_rempio2+0x4c>
    1918:	2a ed       	ldi	r18, 0xDA	; 218
    191a:	3f e0       	ldi	r19, 0x0F	; 15
    191c:	49 ec       	ldi	r20, 0xC9	; 201
    191e:	06 c0       	rjmp	.+12     	; 0x192c <__fp_rempio2+0x24>
    1920:	ee 0f       	add	r30, r30
    1922:	bb 0f       	add	r27, r27
    1924:	66 1f       	adc	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	28 f0       	brcs	.+10     	; 0x1936 <__fp_rempio2+0x2e>
    192c:	b2 3a       	cpi	r27, 0xA2	; 162
    192e:	62 07       	cpc	r22, r18
    1930:	73 07       	cpc	r23, r19
    1932:	84 07       	cpc	r24, r20
    1934:	28 f0       	brcs	.+10     	; 0x1940 <__fp_rempio2+0x38>
    1936:	b2 5a       	subi	r27, 0xA2	; 162
    1938:	62 0b       	sbc	r22, r18
    193a:	73 0b       	sbc	r23, r19
    193c:	84 0b       	sbc	r24, r20
    193e:	e3 95       	inc	r30
    1940:	9a 95       	dec	r25
    1942:	72 f7       	brpl	.-36     	; 0x1920 <__fp_rempio2+0x18>
    1944:	80 38       	cpi	r24, 0x80	; 128
    1946:	30 f4       	brcc	.+12     	; 0x1954 <__fp_rempio2+0x4c>
    1948:	9a 95       	dec	r25
    194a:	bb 0f       	add	r27, r27
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	d2 f7       	brpl	.-12     	; 0x1948 <__fp_rempio2+0x40>
    1954:	90 48       	sbci	r25, 0x80	; 128
    1956:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_mpack_finite>

0000195a <__fp_round>:
    195a:	09 2e       	mov	r0, r25
    195c:	03 94       	inc	r0
__fp_round():
    195e:	00 0c       	add	r0, r0
    1960:	11 f4       	brne	.+4      	; 0x1966 <__fp_round+0xc>
    1962:	88 23       	and	r24, r24
    1964:	52 f0       	brmi	.+20     	; 0x197a <__fp_round+0x20>
    1966:	bb 0f       	add	r27, r27
    1968:	40 f4       	brcc	.+16     	; 0x197a <__fp_round+0x20>
    196a:	bf 2b       	or	r27, r31
    196c:	11 f4       	brne	.+4      	; 0x1972 <__fp_round+0x18>
    196e:	60 ff       	sbrs	r22, 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__fp_round+0x20>
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	08 95       	ret

0000197c <__fp_sinus>:
__fp_sinus():
    197c:	ef 93       	push	r30
    197e:	e0 ff       	sbrs	r30, 0
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <__fp_sinus+0x14>
    1982:	a2 ea       	ldi	r26, 0xA2	; 162
    1984:	2a ed       	ldi	r18, 0xDA	; 218
    1986:	3f e0       	ldi	r19, 0x0F	; 15
    1988:	49 ec       	ldi	r20, 0xC9	; 201
    198a:	5f eb       	ldi	r21, 0xBF	; 191
    198c:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3x>
    1990:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fp_round>
    1994:	0f 90       	pop	r0
    1996:	03 94       	inc	r0
    1998:	01 fc       	sbrc	r0, 1
    199a:	90 58       	subi	r25, 0x80	; 128
    199c:	e4 e5       	ldi	r30, 0x54	; 84
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_powsodd>

000019a4 <__fp_split3>:
__fp_split3():
    19a4:	57 fd       	sbrc	r21, 7
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <__fp_splitA+0x10>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__fp_splitA+0x1a>
    19b2:	47 95       	ror	r20

000019b4 <__fp_splitA>:
    19b4:	88 0f       	add	r24, r24
    19b6:	97 fb       	bst	r25, 7
    19b8:	99 1f       	adc	r25, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <__fp_splitA+0x20>
    19bc:	9f 3f       	cpi	r25, 0xFF	; 255
    19be:	79 f0       	breq	.+30     	; 0x19de <__fp_splitA+0x2a>
    19c0:	87 95       	ror	r24
    19c2:	08 95       	ret
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__fp_split3+0xe>
    19ce:	46 95       	lsr	r20
    19d0:	f1 df       	rcall	.-30     	; 0x19b4 <__fp_splitA>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <__fp_splitA+0x30>
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	18 06       	cpc	r1, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <__fp_splitA+0xc>
    19de:	86 95       	lsr	r24
    19e0:	71 05       	cpc	r23, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	08 94       	sec
    19e6:	08 95       	ret

000019e8 <__fp_zero>:
__fp_zero():
    19e8:	e8 94       	clt

000019ea <__fp_szero>:
    19ea:	bb 27       	eor	r27, r27
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	97 f9       	bld	r25, 7
    19f4:	08 95       	ret

000019f6 <__gesf2>:
__gesf2():
    19f6:	0e 94 47 0c 	call	0x188e	; 0x188e <__fp_cmp>
    19fa:	08 f4       	brcc	.+2      	; 0x19fe <__gesf2+0x8>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	08 95       	ret

00001a00 <__mulsf3>:
__mulsf3():
    1a00:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsf3x>
    1a04:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__fp_round>
    1a08:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1a0c:	38 f0       	brcs	.+14     	; 0x1a1c <__mulsf3+0x1c>
    1a0e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    1a12:	20 f0       	brcs	.+8      	; 0x1a1c <__mulsf3+0x1c>
    1a14:	95 23       	and	r25, r21
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <__mulsf3+0x1c>
    1a18:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1a1c:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1a20:	11 24       	eor	r1, r1
    1a22:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>

00001a26 <__mulsf3x>:
__mulsf3x():
    1a26:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1a2a:	70 f3       	brcs	.-36     	; 0x1a08 <__mulsf3+0x8>

00001a2c <__mulsf3_pse>:
    1a2c:	95 9f       	mul	r25, r21
    1a2e:	c1 f3       	breq	.-16     	; 0x1a20 <__mulsf3+0x20>
    1a30:	95 0f       	add	r25, r21
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	55 1f       	adc	r21, r21
    1a36:	62 9f       	mul	r22, r18
    1a38:	f0 01       	movw	r30, r0
    1a3a:	72 9f       	mul	r23, r18
    1a3c:	bb 27       	eor	r27, r27
    1a3e:	f0 0d       	add	r31, r0
    1a40:	b1 1d       	adc	r27, r1
    1a42:	63 9f       	mul	r22, r19
    1a44:	aa 27       	eor	r26, r26
    1a46:	f0 0d       	add	r31, r0
    1a48:	b1 1d       	adc	r27, r1
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	64 9f       	mul	r22, r20
    1a4e:	66 27       	eor	r22, r22
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	66 1f       	adc	r22, r22
    1a56:	82 9f       	mul	r24, r18
    1a58:	22 27       	eor	r18, r18
    1a5a:	b0 0d       	add	r27, r0
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	62 1f       	adc	r22, r18
    1a60:	73 9f       	mul	r23, r19
    1a62:	b0 0d       	add	r27, r0
    1a64:	a1 1d       	adc	r26, r1
    1a66:	62 1f       	adc	r22, r18
    1a68:	83 9f       	mul	r24, r19
    1a6a:	a0 0d       	add	r26, r0
    1a6c:	61 1d       	adc	r22, r1
    1a6e:	22 1f       	adc	r18, r18
    1a70:	74 9f       	mul	r23, r20
    1a72:	33 27       	eor	r19, r19
    1a74:	a0 0d       	add	r26, r0
    1a76:	61 1d       	adc	r22, r1
    1a78:	23 1f       	adc	r18, r19
    1a7a:	84 9f       	mul	r24, r20
    1a7c:	60 0d       	add	r22, r0
    1a7e:	21 1d       	adc	r18, r1
    1a80:	82 2f       	mov	r24, r18
    1a82:	76 2f       	mov	r23, r22
    1a84:	6a 2f       	mov	r22, r26
    1a86:	11 24       	eor	r1, r1
    1a88:	9f 57       	subi	r25, 0x7F	; 127
    1a8a:	50 40       	sbci	r21, 0x00	; 0
    1a8c:	9a f0       	brmi	.+38     	; 0x1ab4 <__mulsf3_pse+0x88>
    1a8e:	f1 f0       	breq	.+60     	; 0x1acc <__mulsf3_pse+0xa0>
    1a90:	88 23       	and	r24, r24
    1a92:	4a f0       	brmi	.+18     	; 0x1aa6 <__mulsf3_pse+0x7a>
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	66 1f       	adc	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <__mulsf3_pse+0x64>
    1aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	80 f0       	brcs	.+32     	; 0x1acc <__mulsf3_pse+0xa0>
    1aac:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1ab0:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab6:	e4 f3       	brlt	.-8      	; 0x1ab0 <__mulsf3_pse+0x84>
    1ab8:	98 3e       	cpi	r25, 0xE8	; 232
    1aba:	d4 f3       	brlt	.-12     	; 0x1ab0 <__mulsf3_pse+0x84>
    1abc:	86 95       	lsr	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	b7 95       	ror	r27
    1ac4:	f7 95       	ror	r31
    1ac6:	e7 95       	ror	r30
    1ac8:	9f 5f       	subi	r25, 0xFF	; 255
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <__mulsf3_pse+0x90>
    1acc:	fe 2b       	or	r31, r30
    1ace:	88 0f       	add	r24, r24
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	96 95       	lsr	r25
    1ad4:	87 95       	ror	r24
    1ad6:	97 f9       	bld	r25, 7
    1ad8:	08 95       	ret
    1ada:	19 f4       	brne	.+6      	; 0x1ae2 <__mulsf3_pse+0xb6>
    1adc:	16 f4       	brtc	.+4      	; 0x1ae2 <__mulsf3_pse+0xb6>
    1ade:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1ae2:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_mpack>

00001ae6 <sqrt>:
    1ae6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fp_splitA>
    1aea:	b8 f3       	brcs	.-18     	; 0x1ada <__mulsf3_pse+0xae>
    1aec:	99 23       	and	r25, r25
    1aee:	c9 f3       	breq	.-14     	; 0x1ae2 <__mulsf3_pse+0xb6>
    1af0:	b6 f3       	brts	.-20     	; 0x1ade <__mulsf3_pse+0xb2>
    1af2:	9f 57       	subi	r25, 0x7F	; 127
    1af4:	55 0b       	sbc	r21, r21
    1af6:	87 ff       	sbrs	r24, 7
sqrt():
    1af8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__fp_norm2>
    1afc:	00 24       	eor	r0, r0
    1afe:	a0 e6       	ldi	r26, 0x60	; 96
    1b00:	40 ea       	ldi	r20, 0xA0	; 160
    1b02:	90 01       	movw	r18, r0
    1b04:	80 58       	subi	r24, 0x80	; 128
    1b06:	56 95       	lsr	r21
    1b08:	97 95       	ror	r25
    1b0a:	28 f4       	brcc	.+10     	; 0x1b16 <sqrt+0x30>
    1b0c:	80 5c       	subi	r24, 0xC0	; 192
    1b0e:	66 0f       	add	r22, r22
    1b10:	77 1f       	adc	r23, r23
    1b12:	88 1f       	adc	r24, r24
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <sqrt+0x38>
    1b16:	26 17       	cp	r18, r22
    1b18:	37 07       	cpc	r19, r23
    1b1a:	48 07       	cpc	r20, r24
    1b1c:	30 f4       	brcc	.+12     	; 0x1b2a <sqrt+0x44>
    1b1e:	62 1b       	sub	r22, r18
    1b20:	73 0b       	sbc	r23, r19
    1b22:	84 0b       	sbc	r24, r20
    1b24:	20 29       	or	r18, r0
    1b26:	31 29       	or	r19, r1
    1b28:	4a 2b       	or	r20, r26
    1b2a:	a6 95       	lsr	r26
    1b2c:	17 94       	ror	r1
    1b2e:	07 94       	ror	r0
    1b30:	20 25       	eor	r18, r0
    1b32:	31 25       	eor	r19, r1
    1b34:	4a 27       	eor	r20, r26
    1b36:	58 f7       	brcc	.-42     	; 0x1b0e <sqrt+0x28>
    1b38:	66 0f       	add	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <sqrt+0x62>
    1b40:	26 17       	cp	r18, r22
    1b42:	37 07       	cpc	r19, r23
    1b44:	48 07       	cpc	r20, r24
    1b46:	30 f4       	brcc	.+12     	; 0x1b54 <sqrt+0x6e>
    1b48:	62 0b       	sbc	r22, r18
    1b4a:	73 0b       	sbc	r23, r19
    1b4c:	84 0b       	sbc	r24, r20
    1b4e:	20 0d       	add	r18, r0
    1b50:	31 1d       	adc	r19, r1
    1b52:	41 1d       	adc	r20, r1
    1b54:	a0 95       	com	r26
    1b56:	81 f7       	brne	.-32     	; 0x1b38 <sqrt+0x52>
    1b58:	b9 01       	movw	r22, r18
    1b5a:	84 2f       	mov	r24, r20
    1b5c:	91 58       	subi	r25, 0x81	; 129
    1b5e:	88 0f       	add	r24, r24
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	08 95       	ret

00001b66 <__fp_mpack>:
    1b66:	9f 3f       	cpi	r25, 0xFF	; 255
    1b68:	31 f0       	breq	.+12     	; 0x1b76 <__fp_mpack_finite+0xc>

00001b6a <__fp_mpack_finite>:
    1b6a:	91 50       	subi	r25, 0x01	; 1
    1b6c:	20 f4       	brcc	.+8      	; 0x1b76 <__fp_mpack_finite+0xc>
    1b6e:	87 95       	ror	r24
    1b70:	77 95       	ror	r23
__fp_mpack_finite():
    1b72:	67 95       	ror	r22
    1b74:	b7 95       	ror	r27
    1b76:	88 0f       	add	r24, r24
    1b78:	91 1d       	adc	r25, r1
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	97 f9       	bld	r25, 7
    1b80:	08 95       	ret

00001b82 <__fp_norm2>:
__fp_norm2():
    1b82:	91 50       	subi	r25, 0x01	; 1
    1b84:	50 40       	sbci	r21, 0x00	; 0
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	d2 f7       	brpl	.-12     	; 0x1b82 <__fp_norm2>
    1b8e:	08 95       	ret

00001b90 <__fp_powsodd>:
__fp_powsodd():
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	7f 93       	push	r23
    1b96:	6f 93       	push	r22
    1b98:	ff 93       	push	r31
    1b9a:	ef 93       	push	r30
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    1ba4:	ef 91       	pop	r30
    1ba6:	ff 91       	pop	r31
    1ba8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_powser>
    1bac:	2f 91       	pop	r18
    1bae:	3f 91       	pop	r19
    1bb0:	4f 91       	pop	r20
    1bb2:	5f 91       	pop	r21
    1bb4:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__mulsf3>

00001bb8 <__fp_powser>:
__fp_powser():
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	1f 93       	push	r17
    1bbe:	0f 93       	push	r16
    1bc0:	ff 92       	push	r15
    1bc2:	ef 92       	push	r14
    1bc4:	df 92       	push	r13
    1bc6:	7b 01       	movw	r14, r22
    1bc8:	8c 01       	movw	r16, r24
    1bca:	68 94       	set
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <__fp_powser+0x22>
    1bce:	da 2e       	mov	r13, r26
    1bd0:	ef 01       	movw	r28, r30
    1bd2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsf3x>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e8 94       	clt
    1bda:	a5 91       	lpm	r26, Z+
    1bdc:	25 91       	lpm	r18, Z+
    1bde:	35 91       	lpm	r19, Z+
    1be0:	45 91       	lpm	r20, Z+
    1be2:	55 91       	lpm	r21, Z+
    1be4:	a6 f3       	brts	.-24     	; 0x1bce <__fp_powser+0x16>
    1be6:	ef 01       	movw	r28, r30
    1be8:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3x>
    1bec:	fe 01       	movw	r30, r28
    1bee:	97 01       	movw	r18, r14
    1bf0:	a8 01       	movw	r20, r16
    1bf2:	da 94       	dec	r13
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <__fp_powser+0x18>
    1bf6:	df 90       	pop	r13
    1bf8:	ef 90       	pop	r14
    1bfa:	ff 90       	pop	r15
    1bfc:	0f 91       	pop	r16
    1bfe:	1f 91       	pop	r17
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1c06:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1c08:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1c0a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1c0c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1c0e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <__udivmodsi4_ep>

00001c12 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1c12:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1c14:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1c16:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1c18:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1c1a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1c1c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1c1e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1c20:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1c22:	20 f0       	brcs	.+8      	; 0x1c2c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1c24:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1c26:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1c28:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1c2a:	f5 0b       	sbc	r31, r21

00001c2c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1c2c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1c2e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1c30:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1c32:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1c34:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1c38:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1c3a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1c3c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1c3e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1c40:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1c42:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1c44:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1c46:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1c48:	08 95       	ret

00001c4a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    1c4a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    1c4c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    1c4e:	1e f4       	brtc	.+6      	; 0x1c56 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    1c50:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1c52:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1c56:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1c58:	07 d0       	rcall	.+14     	; 0x1c68 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1c5a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    1c5e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    1c60:	03 d0       	rcall	.+6      	; 0x1c68 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    1c62:	4e f4       	brtc	.+18     	; 0x1c76 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    1c64:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__negsi2>

00001c68 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    1c68:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1c6a:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1c6c:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    1c6e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    1c72:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255

00001c76 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    1c76:	08 95       	ret

00001c78 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    1c86:	08 95       	ret

00001c88 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1c88:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1c8a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1c8c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1c8e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1c90:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1c92:	09 94       	ijmp

00001c94 <malloc>:
malloc():
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <malloc+0x12>
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <__flp>
    1caa:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <__flp+0x1>
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	30 97       	sbiw	r30, 0x00	; 0
    1cb8:	99 f4       	brne	.+38     	; 0x1ce0 <malloc+0x4c>
    1cba:	21 15       	cp	r18, r1
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <malloc+0x2e>
    1cc0:	4a c0       	rjmp	.+148    	; 0x1d56 <malloc+0xc2>
    1cc2:	28 1b       	sub	r18, r24
    1cc4:	39 0b       	sbc	r19, r25
    1cc6:	24 30       	cpi	r18, 0x04	; 4
    1cc8:	31 05       	cpc	r19, r1
    1cca:	d8 f5       	brcc	.+118    	; 0x1d42 <malloc+0xae>
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	61 15       	cp	r22, r1
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	89 f1       	breq	.+98     	; 0x1d38 <malloc+0xa4>
    1cd6:	fb 01       	movw	r30, r22
    1cd8:	93 83       	std	Z+3, r25	; 0x03
    1cda:	82 83       	std	Z+2, r24	; 0x02
    1cdc:	fe 01       	movw	r30, r28
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <malloc+0x6e>
    1ce0:	40 81       	ld	r20, Z
    1ce2:	51 81       	ldd	r21, Z+1	; 0x01
    1ce4:	02 81       	ldd	r16, Z+2	; 0x02
    1ce6:	13 81       	ldd	r17, Z+3	; 0x03
    1ce8:	48 17       	cp	r20, r24
    1cea:	59 07       	cpc	r21, r25
    1cec:	e0 f0       	brcs	.+56     	; 0x1d26 <malloc+0x92>
    1cee:	48 17       	cp	r20, r24
    1cf0:	59 07       	cpc	r21, r25
    1cf2:	99 f4       	brne	.+38     	; 0x1d1a <malloc+0x86>
    1cf4:	10 97       	sbiw	r26, 0x00	; 0
    1cf6:	61 f0       	breq	.+24     	; 0x1d10 <malloc+0x7c>
    1cf8:	12 96       	adiw	r26, 0x02	; 2
    1cfa:	0c 93       	st	X, r16
    1cfc:	12 97       	sbiw	r26, 0x02	; 2
    1cfe:	13 96       	adiw	r26, 0x03	; 3
    1d00:	1c 93       	st	X, r17
    1d02:	32 96       	adiw	r30, 0x02	; 2
    1d04:	cf 01       	movw	r24, r30
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	08 95       	ret
    1d10:	00 93 05 02 	sts	0x0205, r16	; 0x800205 <__flp>
    1d14:	10 93 06 02 	sts	0x0206, r17	; 0x800206 <__flp+0x1>
    1d18:	f4 cf       	rjmp	.-24     	; 0x1d02 <malloc+0x6e>
    1d1a:	21 15       	cp	r18, r1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	51 f0       	breq	.+20     	; 0x1d34 <malloc+0xa0>
    1d20:	42 17       	cp	r20, r18
    1d22:	53 07       	cpc	r21, r19
    1d24:	38 f0       	brcs	.+14     	; 0x1d34 <malloc+0xa0>
    1d26:	a9 01       	movw	r20, r18
    1d28:	db 01       	movw	r26, r22
    1d2a:	9a 01       	movw	r18, r20
    1d2c:	bd 01       	movw	r22, r26
    1d2e:	df 01       	movw	r26, r30
    1d30:	f8 01       	movw	r30, r16
    1d32:	c1 cf       	rjmp	.-126    	; 0x1cb6 <malloc+0x22>
    1d34:	ef 01       	movw	r28, r30
    1d36:	f9 cf       	rjmp	.-14     	; 0x1d2a <malloc+0x96>
    1d38:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__flp+0x1>
    1d3c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <__flp>
    1d40:	cd cf       	rjmp	.-102    	; 0x1cdc <malloc+0x48>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	81 93       	st	Z+, r24
    1d4a:	91 93       	st	Z+, r25
    1d4c:	22 50       	subi	r18, 0x02	; 2
    1d4e:	31 09       	sbc	r19, r1
    1d50:	39 83       	std	Y+1, r19	; 0x01
    1d52:	28 83       	st	Y, r18
    1d54:	d7 cf       	rjmp	.-82     	; 0x1d04 <malloc+0x70>
    1d56:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__brkval>
    1d5a:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <__brkval+0x1>
    1d5e:	23 2b       	or	r18, r19
    1d60:	41 f4       	brne	.+16     	; 0x1d72 <malloc+0xde>
    1d62:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1d66:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1d6a:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <__brkval+0x1>
    1d6e:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <__brkval>
    1d72:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d76:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1d7a:	21 15       	cp	r18, r1
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	41 f4       	brne	.+16     	; 0x1d90 <malloc+0xfc>
    1d80:	2d b7       	in	r18, 0x3d	; 61
    1d82:	3e b7       	in	r19, 0x3e	; 62
    1d84:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1d88:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1d8c:	24 1b       	sub	r18, r20
    1d8e:	35 0b       	sbc	r19, r21
    1d90:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <__brkval>
    1d94:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <__brkval+0x1>
    1d98:	e2 17       	cp	r30, r18
    1d9a:	f3 07       	cpc	r31, r19
    1d9c:	a0 f4       	brcc	.+40     	; 0x1dc6 <malloc+0x132>
    1d9e:	2e 1b       	sub	r18, r30
    1da0:	3f 0b       	sbc	r19, r31
    1da2:	28 17       	cp	r18, r24
    1da4:	39 07       	cpc	r19, r25
    1da6:	78 f0       	brcs	.+30     	; 0x1dc6 <malloc+0x132>
    1da8:	ac 01       	movw	r20, r24
    1daa:	4e 5f       	subi	r20, 0xFE	; 254
    1dac:	5f 4f       	sbci	r21, 0xFF	; 255
    1dae:	24 17       	cp	r18, r20
    1db0:	35 07       	cpc	r19, r21
    1db2:	48 f0       	brcs	.+18     	; 0x1dc6 <malloc+0x132>
    1db4:	4e 0f       	add	r20, r30
    1db6:	5f 1f       	adc	r21, r31
    1db8:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <__brkval+0x1>
    1dbc:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <__brkval>
    1dc0:	81 93       	st	Z+, r24
    1dc2:	91 93       	st	Z+, r25
    1dc4:	9f cf       	rjmp	.-194    	; 0x1d04 <malloc+0x70>
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e0 e0       	ldi	r30, 0x00	; 0
    1dca:	9c cf       	rjmp	.-200    	; 0x1d04 <malloc+0x70>

00001dcc <free>:
free():
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	e9 f0       	breq	.+58     	; 0x1e0e <free+0x42>
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	32 97       	sbiw	r30, 0x02	; 2
    1dd8:	13 82       	std	Z+3, r1	; 0x03
    1dda:	12 82       	std	Z+2, r1	; 0x02
    1ddc:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <__flp>
    1de0:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <__flp+0x1>
    1de4:	ed 01       	movw	r28, r26
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	10 97       	sbiw	r26, 0x00	; 0
    1dec:	a1 f4       	brne	.+40     	; 0x1e16 <free+0x4a>
    1dee:	20 81       	ld	r18, Z
    1df0:	31 81       	ldd	r19, Z+1	; 0x01
    1df2:	82 0f       	add	r24, r18
    1df4:	93 1f       	adc	r25, r19
    1df6:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__brkval>
    1dfa:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <__brkval+0x1>
    1dfe:	28 17       	cp	r18, r24
    1e00:	39 07       	cpc	r19, r25
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <free+0x3a>
    1e04:	61 c0       	rjmp	.+194    	; 0x1ec8 <free+0xfc>
    1e06:	f0 93 04 02 	sts	0x0204, r31	; 0x800204 <__brkval+0x1>
    1e0a:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__brkval>
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret
    1e14:	ea 01       	movw	r28, r20
    1e16:	ce 17       	cp	r28, r30
    1e18:	df 07       	cpc	r29, r31
    1e1a:	e8 f5       	brcc	.+122    	; 0x1e96 <free+0xca>
    1e1c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e1e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e20:	9e 01       	movw	r18, r28
    1e22:	41 15       	cp	r20, r1
    1e24:	51 05       	cpc	r21, r1
    1e26:	b1 f7       	brne	.-20     	; 0x1e14 <free+0x48>
    1e28:	e9 01       	movw	r28, r18
    1e2a:	fb 83       	std	Y+3, r31	; 0x03
    1e2c:	ea 83       	std	Y+2, r30	; 0x02
    1e2e:	49 91       	ld	r20, Y+
    1e30:	59 91       	ld	r21, Y+
    1e32:	c4 0f       	add	r28, r20
    1e34:	d5 1f       	adc	r29, r21
    1e36:	ec 17       	cp	r30, r28
    1e38:	fd 07       	cpc	r31, r29
    1e3a:	61 f4       	brne	.+24     	; 0x1e54 <free+0x88>
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	02 96       	adiw	r24, 0x02	; 2
    1e42:	84 0f       	add	r24, r20
    1e44:	95 1f       	adc	r25, r21
    1e46:	e9 01       	movw	r28, r18
    1e48:	99 83       	std	Y+1, r25	; 0x01
    1e4a:	88 83       	st	Y, r24
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	9b 83       	std	Y+3, r25	; 0x03
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	e0 e0       	ldi	r30, 0x00	; 0
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	b9 f5       	brne	.+110    	; 0x1ed2 <free+0x106>
    1e64:	2d 91       	ld	r18, X+
    1e66:	3c 91       	ld	r19, X
    1e68:	11 97       	sbiw	r26, 0x01	; 1
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	02 96       	adiw	r24, 0x02	; 2
    1e6e:	82 0f       	add	r24, r18
    1e70:	93 1f       	adc	r25, r19
    1e72:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__brkval>
    1e76:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <__brkval+0x1>
    1e7a:	28 17       	cp	r18, r24
    1e7c:	39 07       	cpc	r19, r25
    1e7e:	39 f6       	brne	.-114    	; 0x1e0e <free+0x42>
    1e80:	30 97       	sbiw	r30, 0x00	; 0
    1e82:	51 f5       	brne	.+84     	; 0x1ed8 <free+0x10c>
    1e84:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__flp+0x1>
    1e88:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__flp>
    1e8c:	b0 93 04 02 	sts	0x0204, r27	; 0x800204 <__brkval+0x1>
    1e90:	a0 93 03 02 	sts	0x0203, r26	; 0x800203 <__brkval>
    1e94:	bc cf       	rjmp	.-136    	; 0x1e0e <free+0x42>
    1e96:	d3 83       	std	Z+3, r29	; 0x03
    1e98:	c2 83       	std	Z+2, r28	; 0x02
    1e9a:	40 81       	ld	r20, Z
    1e9c:	51 81       	ldd	r21, Z+1	; 0x01
    1e9e:	84 0f       	add	r24, r20
    1ea0:	95 1f       	adc	r25, r21
    1ea2:	c8 17       	cp	r28, r24
    1ea4:	d9 07       	cpc	r29, r25
    1ea6:	61 f4       	brne	.+24     	; 0x1ec0 <free+0xf4>
    1ea8:	4e 5f       	subi	r20, 0xFE	; 254
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1eac:	88 81       	ld	r24, Y
    1eae:	99 81       	ldd	r25, Y+1	; 0x01
    1eb0:	48 0f       	add	r20, r24
    1eb2:	59 1f       	adc	r21, r25
    1eb4:	51 83       	std	Z+1, r21	; 0x01
    1eb6:	40 83       	st	Z, r20
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	93 83       	std	Z+3, r25	; 0x03
    1ebe:	82 83       	std	Z+2, r24	; 0x02
    1ec0:	21 15       	cp	r18, r1
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <free+0xfc>
    1ec6:	b0 cf       	rjmp	.-160    	; 0x1e28 <free+0x5c>
    1ec8:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <__flp+0x1>
    1ecc:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <__flp>
    1ed0:	9e cf       	rjmp	.-196    	; 0x1e0e <free+0x42>
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	c0 cf       	rjmp	.-128    	; 0x1e58 <free+0x8c>
    1ed8:	13 82       	std	Z+3, r1	; 0x03
    1eda:	12 82       	std	Z+2, r1	; 0x02
    1edc:	d7 cf       	rjmp	.-82     	; 0x1e8c <free+0xc0>

00001ede <realloc>:
realloc():
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	a0 e0       	ldi	r26, 0x00	; 0
    1ee2:	e5 e7       	ldi	r30, 0x75	; 117
    1ee4:	ff e0       	ldi	r31, 0x0F	; 15
    1ee6:	0c 94 47 10 	jmp	0x208e	; 0x208e <__prologue_saves__+0x4>
    1eea:	8c 01       	movw	r16, r24
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	51 f4       	brne	.+20     	; 0x1f04 <realloc+0x26>
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <malloc>
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	c8 01       	movw	r24, r16
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	e0 e1       	ldi	r30, 0x10	; 16
    1f00:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__epilogue_restores__+0x4>
    1f04:	fc 01       	movw	r30, r24
    1f06:	e6 0f       	add	r30, r22
    1f08:	f7 1f       	adc	r31, r23
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 50       	subi	r18, 0x02	; 2
    1f0e:	31 09       	sbc	r19, r1
    1f10:	e2 17       	cp	r30, r18
    1f12:	f3 07       	cpc	r31, r19
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <realloc+0x3a>
    1f16:	9d c0       	rjmp	.+314    	; 0x2052 <realloc+0x174>
    1f18:	d9 01       	movw	r26, r18
    1f1a:	cd 91       	ld	r28, X+
    1f1c:	dc 91       	ld	r29, X
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	c6 17       	cp	r28, r22
    1f22:	d7 07       	cpc	r29, r23
    1f24:	98 f0       	brcs	.+38     	; 0x1f4c <realloc+0x6e>
    1f26:	c5 30       	cpi	r28, 0x05	; 5
    1f28:	d1 05       	cpc	r29, r1
    1f2a:	30 f3       	brcs	.-52     	; 0x1ef8 <realloc+0x1a>
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	04 97       	sbiw	r24, 0x04	; 4
    1f30:	86 17       	cp	r24, r22
    1f32:	97 07       	cpc	r25, r23
    1f34:	08 f3       	brcs	.-62     	; 0x1ef8 <realloc+0x1a>
    1f36:	c6 1b       	sub	r28, r22
    1f38:	d7 0b       	sbc	r29, r23
    1f3a:	22 97       	sbiw	r28, 0x02	; 2
    1f3c:	c1 93       	st	Z+, r28
    1f3e:	d1 93       	st	Z+, r29
    1f40:	6d 93       	st	X+, r22
    1f42:	7c 93       	st	X, r23
    1f44:	cf 01       	movw	r24, r30
    1f46:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <free>
    1f4a:	d6 cf       	rjmp	.-84     	; 0x1ef8 <realloc+0x1a>
    1f4c:	5b 01       	movw	r10, r22
    1f4e:	ac 1a       	sub	r10, r28
    1f50:	bd 0a       	sbc	r11, r29
    1f52:	4c 01       	movw	r8, r24
    1f54:	8c 0e       	add	r8, r28
    1f56:	9d 1e       	adc	r9, r29
    1f58:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <__flp>
    1f5c:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <__flp+0x1>
    1f60:	51 2c       	mov	r5, r1
    1f62:	41 2c       	mov	r4, r1
    1f64:	f1 2c       	mov	r15, r1
    1f66:	e1 2c       	mov	r14, r1
    1f68:	10 97       	sbiw	r26, 0x00	; 0
    1f6a:	31 f5       	brne	.+76     	; 0x1fb8 <realloc+0xda>
    1f6c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <__brkval>
    1f70:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <__brkval+0x1>
    1f74:	88 15       	cp	r24, r8
    1f76:	99 05       	cpc	r25, r9
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <realloc+0x9e>
    1f7a:	5c c0       	rjmp	.+184    	; 0x2034 <realloc+0x156>
    1f7c:	46 16       	cp	r4, r22
    1f7e:	57 06       	cpc	r5, r23
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <realloc+0xa6>
    1f82:	58 c0       	rjmp	.+176    	; 0x2034 <realloc+0x156>
    1f84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1f88:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	41 f4       	brne	.+16     	; 0x1fa0 <realloc+0xc2>
    1f90:	8d b7       	in	r24, 0x3d	; 61
    1f92:	9e b7       	in	r25, 0x3e	; 62
    1f94:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1f98:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1f9c:	84 1b       	sub	r24, r20
    1f9e:	95 0b       	sbc	r25, r21
    1fa0:	e8 17       	cp	r30, r24
    1fa2:	f9 07       	cpc	r31, r25
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <realloc+0xca>
    1fa6:	55 c0       	rjmp	.+170    	; 0x2052 <realloc+0x174>
    1fa8:	f0 93 04 02 	sts	0x0204, r31	; 0x800204 <__brkval+0x1>
    1fac:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__brkval>
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	71 83       	std	Z+1, r23	; 0x01
    1fb4:	60 83       	st	Z, r22
    1fb6:	a0 cf       	rjmp	.-192    	; 0x1ef8 <realloc+0x1a>
    1fb8:	8d 91       	ld	r24, X+
    1fba:	9c 91       	ld	r25, X
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	12 96       	adiw	r26, 0x02	; 2
    1fc0:	6c 90       	ld	r6, X
    1fc2:	12 97       	sbiw	r26, 0x02	; 2
    1fc4:	13 96       	adiw	r26, 0x03	; 3
    1fc6:	7c 90       	ld	r7, X
    1fc8:	13 97       	sbiw	r26, 0x03	; 3
    1fca:	a8 15       	cp	r26, r8
    1fcc:	b9 05       	cpc	r27, r9
    1fce:	59 f5       	brne	.+86     	; 0x2026 <realloc+0x148>
    1fd0:	6c 01       	movw	r12, r24
    1fd2:	42 e0       	ldi	r20, 0x02	; 2
    1fd4:	c4 0e       	add	r12, r20
    1fd6:	d1 1c       	adc	r13, r1
    1fd8:	ca 14       	cp	r12, r10
    1fda:	db 04       	cpc	r13, r11
    1fdc:	20 f1       	brcs	.+72     	; 0x2026 <realloc+0x148>
    1fde:	ac 01       	movw	r20, r24
    1fe0:	4a 19       	sub	r20, r10
    1fe2:	5b 09       	sbc	r21, r11
    1fe4:	da 01       	movw	r26, r20
    1fe6:	12 96       	adiw	r26, 0x02	; 2
    1fe8:	15 97       	sbiw	r26, 0x05	; 5
    1fea:	80 f0       	brcs	.+32     	; 0x200c <realloc+0x12e>
    1fec:	62 82       	std	Z+2, r6	; 0x02
    1fee:	73 82       	std	Z+3, r7	; 0x03
    1ff0:	51 83       	std	Z+1, r21	; 0x01
    1ff2:	40 83       	st	Z, r20
    1ff4:	d9 01       	movw	r26, r18
    1ff6:	6d 93       	st	X+, r22
    1ff8:	7c 93       	st	X, r23
    1ffa:	e1 14       	cp	r14, r1
    1ffc:	f1 04       	cpc	r15, r1
    1ffe:	71 f0       	breq	.+28     	; 0x201c <realloc+0x13e>
    2000:	d7 01       	movw	r26, r14
    2002:	13 96       	adiw	r26, 0x03	; 3
    2004:	fc 93       	st	X, r31
    2006:	ee 93       	st	-X, r30
    2008:	12 97       	sbiw	r26, 0x02	; 2
    200a:	76 cf       	rjmp	.-276    	; 0x1ef8 <realloc+0x1a>
    200c:	22 96       	adiw	r28, 0x02	; 2
    200e:	8c 0f       	add	r24, r28
    2010:	9d 1f       	adc	r25, r29
    2012:	f9 01       	movw	r30, r18
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	f3 01       	movw	r30, r6
    201a:	ef cf       	rjmp	.-34     	; 0x1ffa <realloc+0x11c>
    201c:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <__flp+0x1>
    2020:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <__flp>
    2024:	69 cf       	rjmp	.-302    	; 0x1ef8 <realloc+0x1a>
    2026:	48 16       	cp	r4, r24
    2028:	59 06       	cpc	r5, r25
    202a:	08 f4       	brcc	.+2      	; 0x202e <realloc+0x150>
    202c:	2c 01       	movw	r4, r24
    202e:	7d 01       	movw	r14, r26
    2030:	d3 01       	movw	r26, r6
    2032:	9a cf       	rjmp	.-204    	; 0x1f68 <realloc+0x8a>
    2034:	cb 01       	movw	r24, r22
    2036:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <malloc>
    203a:	7c 01       	movw	r14, r24
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	49 f0       	breq	.+18     	; 0x2052 <realloc+0x174>
    2040:	ae 01       	movw	r20, r28
    2042:	b8 01       	movw	r22, r16
    2044:	0e 94 2c 10 	call	0x2058	; 0x2058 <memcpy>
    2048:	c8 01       	movw	r24, r16
    204a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <free>
    204e:	87 01       	movw	r16, r14
    2050:	53 cf       	rjmp	.-346    	; 0x1ef8 <realloc+0x1a>
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	00 e0       	ldi	r16, 0x00	; 0
    2056:	50 cf       	rjmp	.-352    	; 0x1ef8 <realloc+0x1a>

00002058 <memcpy>:
memcpy():
    2058:	fb 01       	movw	r30, r22
    205a:	dc 01       	movw	r26, r24
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <memcpy+0xa>
    205e:	01 90       	ld	r0, Z+
    2060:	0d 92       	st	X+, r0
    2062:	41 50       	subi	r20, 0x01	; 1
    2064:	50 40       	sbci	r21, 0x00	; 0
    2066:	d8 f7       	brcc	.-10     	; 0x205e <memcpy+0x6>
    2068:	08 95       	ret

0000206a <strcmp>:
strcmp():
    206a:	fb 01       	movw	r30, r22
    206c:	dc 01       	movw	r26, r24
    206e:	8d 91       	ld	r24, X+
    2070:	01 90       	ld	r0, Z+
    2072:	80 19       	sub	r24, r0
    2074:	01 10       	cpse	r0, r1
    2076:	d9 f3       	breq	.-10     	; 0x206e <strcmp+0x4>
    2078:	99 0b       	sbc	r25, r25
    207a:	08 95       	ret

0000207c <strcpy>:
strcpy():
    207c:	fb 01       	movw	r30, r22
    207e:	dc 01       	movw	r26, r24
    2080:	01 90       	ld	r0, Z+
    2082:	0d 92       	st	X+, r0
    2084:	00 20       	and	r0, r0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <strcpy+0x4>
    2088:	08 95       	ret

0000208a <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    208a:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    208c:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    208e:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    2090:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    2092:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    2094:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    2096:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    2098:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    209a:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    209c:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    209e:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    20a0:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    20a2:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    20a4:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    20a6:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    20a8:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    20aa:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    20ac:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    20ae:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    20b0:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    20b2:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    20b4:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    20b6:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    20b8:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    20ba:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    20bc:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    20be:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    20c0:	09 94       	ijmp

000020c2 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    20c2:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    20c4:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    20c6:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    20c8:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    20ca:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    20cc:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    20ce:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    20d0:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    20d2:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    20d4:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    20d6:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    20d8:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    20da:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    20dc:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    20de:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    20e0:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    20e2:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    20e4:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    20e6:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    20e8:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    20ea:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    20ec:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    20ee:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    20f0:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    20f2:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    20f4:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    20f6:	08 95       	ret

000020f8 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    20f8:	f8 94       	cli

000020fa <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    20fa:	ff cf       	rjmp	.-2      	; 0x20fa <__stop_program>
